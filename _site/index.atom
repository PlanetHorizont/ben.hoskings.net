<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://benhoskin.gs/</id>
  <title>benhoskin.gs</title>
  <link href="http://benhoskin.gs" rel="alternate"/>
  <link href="http://benhoskin.gs/index.atom" rel="self"/>
  <updated>2010-12-26T16:27:27+11:00</updated>
  <author>
    <name>Ben Hoskings</name>
    <email>ben@hoskings.net</email>
    <uri>http://benhoskin.gs</uri>
  </author>

  <entry>
    <title>thanks, hivemelb</title>
    <link href="http://benhoskin.gs/2010/12/24/thanks-hivemelb"/>
    <updated>2010-12-24T00:00:00+11:00</updated>
    <id>http://benhoskin.gs/2010/12/24/thanks-hivemelb</id>
    <content type="html">&lt;p&gt;Back in mid-November, my mate &lt;a href='http://twitter.com/nathan_scott'&gt;Nathan&lt;/a&gt; spoke &lt;a href='http://thehive.org.au/nathan-sampimon-from-inspire9/'&gt;at The Hive&lt;/a&gt; about his experiences founding &lt;a href='http://twitter.com/inspire9'&gt;Inspire9&lt;/a&gt; as a freelance web developer. Nath&amp;#8217;s talk was great, and the discussion that followed it was too. Amidst all of this, someone took it upon themselves to pinch my iPad. But through the generosity of the Hive attendees, I have a new one. So this post is definitely overdue, but better late than never, right?&lt;/p&gt;

&lt;p&gt;That evening, the iPad was sitting more or less in front of me on the stage. When it was taken I was deep in conversation with Mikala of &lt;a href='http://twitter.com/MiFAgallery'&gt;MiFA&lt;/a&gt;, but I happened to notice someone stand up and walk away from just next to where it was sitting, and something about it made me check my iPad was still there&amp;#8212;which it wasn&amp;#8217;t. I glanced about to see if anyone had moved it, and by the time I turned around to spot the potential thief, they were gone.&lt;/p&gt;

&lt;p&gt;I darted down to the street, but couldn&amp;#8217;t see them there either. So I ran back upstairs and told &lt;a href='http://twitter.com/pat'&gt;Pat&lt;/a&gt;; we grabbed his laptop and fired up &lt;a href='http://www.apple.com/mobileme/features/find-my-iphone.html'&gt;Find My iPad&lt;/a&gt;, and there it was, moving along the street about a block away.&lt;/p&gt;

&lt;p&gt;In my naïveté I thought it might be a good idea to send a message to the iPad. (You can do that with Find My iPad). So I said to the thief that if they reconsidered and brought it back, I&amp;#8217;d really appreciate it, along with my phone number and email. Yeah&amp;#8230; that achieved nothing.&lt;/p&gt;
&lt;img alt='Map of the approximate route the stolen iPad took' class='lightboxable' src='/images/thanks-hivemelb/map.png' /&gt;
&lt;p&gt;By this time &lt;a href='http://twitter.com/kealey'&gt;Kealey&lt;/a&gt; had joined in and was &lt;a href='http://twitter.com/kealey/status/4475673116672000'&gt;tweeting&lt;/a&gt; &lt;a href='http://twitter.com/kealey/status/4475681270403072'&gt;like&lt;/a&gt; &lt;a href='http://twitter.com/kealey/status/4476389864505344'&gt;a&lt;/a&gt; &lt;a href='http://twitter.com/kealey/status/4477571194421248'&gt;champ&lt;/a&gt;. I loaded up the GPS tracking on my iPhone and headed down to the street while Kealey and Nathan tracked the iPad&amp;#8217;s progress on Pat&amp;#8217;s laptop. We saw it head north from The Order of Melbourne along Elizabeth and onto Royal Parade, along the 19 tram route. Soon it began to move at a tram-ish speed. Unbeknownst to me, Hive founder &lt;a href='http://twitter.com/lukemccormack'&gt;Luke&lt;/a&gt; had jumped in a cab and was following the tram up Royal Parade. I was on the phone with the police, saying &amp;#8220;I can see exactly where they are on a map! Send backup!&amp;#8221; (or something like that).&lt;/p&gt;

&lt;p&gt;Our pursuit of the thief was looking promising, with surveillance HQ at The Order, me on foot, and Luke in a taxi in hot pursuit. But then suddenly, the iPad disappeared from my MobileMe account. (That&amp;#8217;s what happens if you delete the account from the iPad, or wipe it.) And that was it; there was nothing more we could do. I headed back to the order and changed my passwords. (I made a proper police report later that evening too, but haven&amp;#8217;t heard anything.)&lt;/p&gt;
&lt;img alt='Chat with Nathan' class='chat' src='/images/thanks-hivemelb/chat-with-nathan.png' /&gt;
&lt;p&gt;The next morning, I was chatting with Nath and he nonchalantly dropped a question or two.&lt;/p&gt;

&lt;p&gt;Luke and The Hive organised &lt;a href='http://pledgie.com/campaigns/13960'&gt;a pledgie&lt;/a&gt; via twitter. Donations started coming in from lots of lovely Hive attendees and twitterers. All told, you guys donated practically enough to buy me a new iPad, which really humbled me. I don&amp;#8217;t feel like I deserved such generosity.&lt;/p&gt;
&lt;img alt='My new iPad' class='lightboxable' src='/images/thanks-hivemelb/new-ipad.jpg' /&gt;
&lt;p&gt;I believe that the best way to react to something so disproportionately nice is to pay it forward. And so, in the spirit of generosity that replaced my iPad, I&amp;#8217;d like to send an iPad&amp;#8217;s worth of cash somewhere it will be used well. There are a few worthy causes I can think of, but I think it&amp;#8217;d be nicer if you guys decide.&lt;/p&gt;

&lt;p&gt;You can vote for the cause of your choice by clicking its name. Or if there&amp;#8217;s one in particular that you think others would like to vote for too, you can type its name and hit enter (but keep it short, my little voting app will reject names that don&amp;#8217;t fit). If there&amp;#8217;s a clear favourite I&amp;#8217;ll send all the cash their way; if it&amp;#8217;s too close to call I&amp;#8217;ll split it between the leaders. I&amp;#8217;m sure between all of us we can come up with lots of worthwhile causes. So, vote well!&lt;/p&gt;
&lt;div id='vote'&gt;
  &lt;ul class='results'&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Fine print: Voting is totally anonymous and so it&amp;#8217;s pretty gameable, but, you know, don&amp;#8217;t do that please. :)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lastly, thanks once again to all you lovely people from The Hive who generously donated a piece of my new iPad. I&amp;#8217;m really grateful for it.&lt;/p&gt;
&lt;style media='screen' type='text/css'&gt;
  img {
    margin-bottom: 1.5em;
  }
  img.lightboxable, img.chat {
    float: right;
    margin-left: 10px;
  }
  img.lightboxable {
    width: 38%;
  }
  ul.results li {
    list-style-type: none;
    overflow: hidden;
  }
  ul.results li input[type=submit]:disabled {
    color: #333;
    background: transparent;
    border: #bbb 1px solid;
  }
  ul.results li form,
  ul.results li p,
  ul.results li div.result {
    float: left;
  }
  ul.results li div.result {
    padding-top: 1px;
  }
  ul.results li div.result span {
    padding: 0 0.4em;
  }
  ul.results li p {
    margin: 0;
  }
  ul.results li div.count {
    float: left;
    line-height: 1;
    height: 1.2em;
    margin: 0.2em 0 0 0.4em;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    -o-border-radius: 3px;
    border-radius: 3px;
    background-color: #197a9f;
  }
  ul.results li form {
    width: 7em;
    text-align: right;
    padding-right: 0.2em;
    border-right: #777 1px solid;
  }
  ul.results li.custom input[type=text] {
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    -o-border-radius: 3px;
    border-radius: 3px;
    background-color: #ccc;
    border: #777777 1px solid;
    padding: 0.2em 0;
    margin-bottom: 0.2em;
    width: 6em;
  }
  ul.results li.custom input[type=submit] {
    display: none;
  }
  input[type=submit], .button {
    color: #333;
    margin-bottom: 0.4em;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    -o-border-radius: 3px;
    border-radius: 3px;
    background-color: #999;
    border: #777777 1px solid;
    background: -webkit-gradient(linear, left top, left bottom, from(#ccc), to(#888), color-stop(0.6, #999), color-stop(0.6, #909090), color-stop(0.85, #808080)); }
    input[type=submit][type=submit], .button[type=submit] {
      padding: 0.2em 0.2em; }
    input[type=submit]:hover, .button:hover {
      cursor: pointer;
      background: -webkit-gradient(linear, left top, left bottom, from(#989898), to(#606060), color-stop(0.6, #707070), color-stop(0.6, #666), color-stop(0.85, #585858)); }
    input[type=submit]:active, .button:active {
      background: -webkit-gradient(linear, left top, left bottom, from(#aaa), to(#666), color-stop(0.6, #777), color-stop(0.6, #707070), color-stop(0.85, #606060)); }
&lt;/style&gt;&lt;script charset='utf-8' type='text/javascript'&gt;
  head.ready(function() {
    String.prototype.slugify = function() {
      return this.toLowerCase().replace(' ', '-').replace(/[^a-z0-9-]/i, '');
    };
    var get_results = function(callback) {
      $.ajax({
        url: '/thanks-hivemelb/results.jsonp',
        dataType: 'jsonp',
        success: callback
      });
    };
    var on_choice_submit = function() {
      var form = $(this);
      var action = form.attr('action');
      if (form.find('input[type=text]').length &gt; 0) {
        action = "/thanks-hivemelb/vote.jsonp/" + form.find('input[type=text]').val();
      }
      $('ul.results li input[type=submit]').attr('disabled', 'disabled');
      $.ajax({
        url: action,
        type: 'POST',
        dataType: 'jsonp',
        success: function(data) {
          var total_count = 0;
          $(data).each(function(i, result) {
            total_count += parseInt(result.count);
          });
          $(data).each(function(i, result) {
            var add_result_to = function(elem) {
              elem.find('div.result').remove();
              return elem.append(
                $('&lt;div /&gt;')
                  .addClass('result')
                  .data('count', result.count)
                  .append(
                    $('&lt;span /&gt;').html(result.count),
                    $('&lt;div /&gt;')
                      .addClass('count')
                      .css({width: '0'})
                      .animate({width: (400 * result.count / total_count) + 'px'}, 1000)
                  )
              );
            };
            $('ul.results li.custom').hide();
            if (form.parents('ul').children('li').filter('.' + result.choice.slugify()).length == 0) {
              $('ul.results').append(
                add_result_to($('&lt;li /&gt;')
                  .addClass(result.choice.slugify())
                  .append(choice_form_for(result, function() {}))
                )
              );
              $('ul.results li input[type=submit]').attr('disabled', 'disabled');
            } else {
              add_result_to($('ul.results li.' + result.choice.slugify()));
            }
          });
        }
      });
      return false;
    };
    var choice_form_for = function(result, callback) {
      return $('&lt;form /&gt;')
        .attr('method', 'post')
        .attr('action', '/thanks-hivemelb/vote.jsonp/' + result.choice)
        .append(
          $('&lt;input /&gt;').attr('type', 'submit').attr('value', result.choice)
        ).submit(callback);
    };
    get_results(function(data) {
      $(data).each(function(i, result) {
        $('ul.results').append(
          $('&lt;li /&gt;').addClass(
            result.choice.slugify()
          ).append(
            choice_form_for(result, on_choice_submit)
          )
        );
      });
      $('ul.results').append(
        $('&lt;li /&gt;').addClass('custom').append(function() {
          var form = choice_form_for({choice: ''}, on_choice_submit);
          form.prepend(
            $('&lt;input /&gt;').attr('type', 'text').attr('name', 'choice')
          );
          return form;
        }())
      );
    });
  });
&lt;/script&gt;</content>
  </entry>

  <entry>
    <title>railsrumble stack</title>
    <link href="http://benhoskin.gs/2010/10/16/railsrumble-stack"/>
    <updated>2010-10-16T00:00:00+11:00</updated>
    <id>http://benhoskin.gs/2010/10/16/railsrumble-stack</id>
    <content type="html">&lt;p&gt;Here&amp;#8217;s how I set up a rails stack. If you&amp;#8217;re railsrumbling this weekend, I hope babushka can save you some time. I&amp;#8217;ll be loitering around the nearest twitter, so please direct any questions towards &lt;a href='http://twitter.com/babushka_app'&gt;@babushka_app&lt;/a&gt; and I&amp;#8217;ll do my best to help out.&lt;/p&gt;

&lt;p&gt;My deps will roll a bundler/passenger3/nginx/postgres stack. If you&amp;#8217;re using apache or mysql, there might be other deps out there. Or you might be out of luck. I recommend using nginx and/or postgres instead. :)&lt;/p&gt;

&lt;p&gt;First, the tl;dr version, to host an app on &lt;code&gt;example.org&lt;/code&gt;. The commands are for the server except where it says otherwise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# as root, on a fresh instance
bash -c &amp;quot;`wget -O - babushka.me/up/hard`&amp;quot;      # install babushka

# then, also as root
babushka &amp;#39;benhoskings:passwordless ssh logins&amp;#39;
babushka benhoskings:system                    # publickey-only sshd, etc
babushka &amp;#39;benhoskings:user exists&amp;#39;             # create the app&amp;#39;s account
passwd example.org                             # for sudoing later
su - example.org

# as example.org
babushka &amp;#39;benhoskings:passwordless ssh logins&amp;#39;
babushka &amp;#39;benhoskings:passenger deploy repo&amp;#39;   # ~/current deploy target

# (within your local repo)
git remote add production example.org@&amp;lt;linode IP&amp;gt;:~/current
git push production master                     # initial deploy

# as example.org
babushka &amp;#39;benhoskings:rails app&amp;#39;               # host the app&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To deploy, just push to the production remote. The deploy repo will accept any branch, and handles creating or switching to it as required, so you can just push any old crap and it will be live.&lt;/p&gt;

&lt;p&gt;I recommend creating a branch named &lt;code&gt;deploy&lt;/code&gt; for this purpose, and merging into it locally before pushing.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Those instructions again, with some commentary&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First, log into a fresh instance as root and install babushka. I test babushka against ubuntu and recommend 10.10. Other apt-based distributions should be fine; babushka also supports yum, and my deps could support it with a couple of trivial tweaks to add package names.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash -c &amp;quot;`wget -O - babushka.me/up`&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right, that&amp;#8217;s ruby, git and babushka all installed. Next, ssh public key. (If you&amp;#8217;re on a Mac, throw it on your clipboard by running &lt;code&gt;cat ~/.ssh/id_dsa.pub | pbcopy&lt;/code&gt; locally.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;babushka &amp;#39;benhoskings:passwordless ssh logins&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, configure some basic system stuff - &lt;code&gt;sshd&lt;/code&gt; with publickey-only logins for security, a few tools like &lt;code&gt;screen&lt;/code&gt; &amp;amp; &lt;code&gt;nmap&lt;/code&gt;, and a &lt;code&gt;sudo&lt;/code&gt;ing admin group. Since this turns off password logins, if you didn&amp;#8217;t add your publickey in the previous step, this will lock you out of the server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;babushka benhoskings:system&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right, that&amp;#8217;s the system done. Next, you want a user account for your webapp to run as. (Of course, it&amp;#8217;s easy to configure a user account, but this is nice and consistent and gets the groups right every time.) A good convention is to name the user account after your app&amp;#8217;s domain, say &lt;code&gt;example.org&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;babushka &amp;#39;benhoskings:user exists&amp;#39;
passwd example.org
su - example.org&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we set up ssh logins for the app user. Everyone who wants to be able to deploy should run this step. (Remember, &lt;code&gt;cat ~/.ssh/id_dsa.pub | pbcopy&lt;/code&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;babushka &amp;#39;benhoskings:passwordless ssh logins&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then create the production git repo that we push to in order to deploy. (It has a &lt;code&gt;post-receive&lt;/code&gt; hook that handles the changeover.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;babushka &amp;#39;benhoskings:passenger deploy repo&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, on your local machine (for each teammate), add the deploy repo as a remote and push your app to it. You&amp;#8217;ll see some extra output during the push as the production repo does its thing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add production example.org@&amp;lt;linode IP&amp;gt;:~/current
git push production master&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can babushka up a rails stack against your app. As the &lt;code&gt;example.org&lt;/code&gt; user again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;babushka &amp;#39;benhoskings:rails app&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;To deploy your app, just push to the &lt;code&gt;production&lt;/code&gt; branch. If you want to add custom deploy-time tasks, you could add them to &lt;code&gt;~/current/.git/hooks/post-receive&lt;/code&gt;. Or if you like, use capistrano or a similar tool; anything that results in the app being deployed to &lt;code&gt;~/current&lt;/code&gt; (or whatever path you chose) will work fine.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If it fails because you forgot something, remember babushka can run from any start state. So once you&amp;#8217;ve corrected the problem, just run babushka again, and it&amp;#8217;ll skip everything that&amp;#8217;s already complete from previous runs. If you&amp;#8217;re having trouble, or babushka is complaining and you don&amp;#8217;t think it&amp;#8217;s your fault, ping &lt;a href='http://twitter.com/babushka_app'&gt;@babushka_app&lt;/a&gt; and I&amp;#8217;ll do my best to help out.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There are some things you&amp;#8217;ll have to do manually, like scheduling background tasks.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Once the &amp;#8216;rails app&amp;#8217; dep has run, you&amp;#8217;ll have to add a DNS entry for your domain. If you just browse to your linode IP, the virtualhost won&amp;#8217;t match and you&amp;#8217;ll see &amp;#8216;Welcome to nginx!&amp;#8217;. Which is lovely, but won&amp;#8217;t win you any rails rumbles.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>babushka community stats</title>
    <link href="http://benhoskin.gs/2010/09/24/babushka-community-stats"/>
    <updated>2010-09-24T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2010/09/24/babushka-community-stats</id>
    <content type="html">&lt;p&gt;I&amp;#8217;ve merged a new feature into babushka&amp;#8217;s &lt;code&gt;next&lt;/code&gt; branch that adds functionality in a new direction. The changes teach babushka to collectively build a database of the deps that are being run, their success rates, and where to find them. Babushka can query this database over HTTP, so everyone can discover new deps from babushka itself.&lt;/p&gt;

&lt;p&gt;Firstly, while I&amp;#8217;m pretty excited about this, it&amp;#8217;s definitely not a finalised design. Your feedback will shape its future.&lt;/p&gt;

&lt;p&gt;Secondly, any tool that sends data to a server immediately raises privacy questions, so I&amp;#8217;d like to describe the design, and show that it&amp;#8217;s truly a community database: open, transparent and anonymous.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;So, what is it?&lt;/em&gt; Well, there&amp;#8217;s a new command, &lt;code&gt;babushka search&lt;/code&gt;, which queries this database, like so. You can try it out yourself if you switch to the &lt;code&gt;next&lt;/code&gt; branch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;babushka &amp;#39;babushka next&amp;#39;
babushka search tmbundle&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt='babushka search example' src='/images/babushka-search-example.png' /&gt;&lt;/p&gt;

&lt;p&gt;The results show matching deps that others have used, and for each, the number of runs this week, and the proportion of those runs that succeeded. This should give you a feel for what&amp;#8217;s popular and what&amp;#8217;s reliable at the moment. For the deps that are in a source on GitHub following the &lt;code&gt;username/babushka-deps&lt;/code&gt; convention, the command to instantly run that dep is shown too.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This data is collected by babushka itself.&lt;/em&gt; Whenever babushka finishes running a dep from a public source, it writes some info about the run to a file. Then, whenever babushka is invoked, it asynchronously submits that info to the babushka web service. It&amp;#8217;s done in the background like this for three reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If it were synchronous, every babushka run would pause for a second or two while babushka contacted the web service, which would suck.&lt;/li&gt;

&lt;li&gt;It means the files can accumulate when your machine is offline, and be flushed to the web service whenever babushka is next run online.&lt;/li&gt;

&lt;li&gt;You can inspect the files, and see exactly what babushka is sending over the wire.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;If this system weren&amp;#8217;t carefully implemented, it would be a privacy problem.&lt;/em&gt; I&amp;#8217;ve designed the system in a way that I believe is completely transparent. You don&amp;#8217;t have to trust me in order to use babushka.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Firstly (and obviously), &lt;strong&gt;babushka is open source&lt;/strong&gt;. The calls it makes to the web service are cleanly defined in the code&amp;#8212;just grep for &lt;code&gt;Net::HTTP&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;Secondly, &lt;strong&gt;the web service is also open source&lt;/strong&gt;&amp;#8212;the code that runs &lt;code&gt;babushka.me&lt;/code&gt; (a rails 3 app) is &lt;a href='http://github.com/benhoskings/babushka.me'&gt;on github&lt;/a&gt; for all to see.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;The unsent run info is stored on your machine as an HTTP param string&lt;/strong&gt;, so you can see the exact data that will be sent before the fact. They&amp;#8217;re in &lt;code&gt;~/.babushka/runs/&lt;/code&gt;. (The info for a given run is sent the next time babushka is run.)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Only deps from public sources are reported&lt;/strong&gt;&amp;#8212;that is, sources whose URIs start with &lt;code&gt;git://&lt;/code&gt;, like read-only GitHub URIs. So if you have private deps that are stored locally on your machine, or in a private source with a &lt;code&gt;user@host&lt;/code&gt;-style URI, or anything else, babushka will never submit those to the web service. Only sources pointing to &lt;code&gt;git://&lt;/code&gt; remotes are considered.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;The web service API is public&lt;/strong&gt;&amp;#8212;babushka uses it when it submits runs and queries the database. The web service happily serves up JSON or YAML to anybody.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;The database itself is public&lt;/strong&gt;, for anyone to download &lt;a href='http://babushka.me/db/babushka.me.psql'&gt;as a postgres dump&lt;/a&gt;. It&amp;#8217;s freshly exported by the web service whenever required via &lt;code&gt;babushka &amp;#39;benhoskings:babushka.me db dump&amp;#39;&lt;/code&gt;. (It&amp;#8217;s going to get pretty big pretty quickly, but that&amp;#8217;s a problem for later.)&lt;/li&gt;

&lt;li&gt;Finally, &lt;strong&gt;the data is totally anonymous anyway&lt;/strong&gt;, so avenues via which I can appropriate the data for evil purposes are quite limited.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#8217;s an example. After running &lt;code&gt;babushka benhoskings:Cucumber.tmbundle&lt;/code&gt;, here is the info written to &lt;code&gt;~/.babushka/runs&lt;/code&gt;, which is the exact data that will be submitted as HTTP params to &lt;code&gt;http://babushka.me/runs.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;⚡ cat ~/.babushka/runs/1285303540.794963
version=0.6.2&amp;amp;run_at=2010-09-24%2014:45:40%20+1000&amp;amp;system_info=Mac%20OS%20X
%2010.6.4%20(Snow%20Leopard)&amp;amp;dep_name=Cucumber.tmbundle&amp;amp;source_uri=git://gi
thub.com/benhoskings/babushka-deps.git&amp;amp;result=ok&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cleaning that up a bit, we can see that all it knows about me is that I&amp;#8217;m a Mac user and I&amp;#8217;m in GMT+10.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version=0.6.2
run_at=2010-09-24 14:45:40 +1000
system_info=Mac OS X 10.6.4 (Snow Leopard)
dep_name=Cucumber.tmbundle
source_uri=git://github.com/benhoskings/babushka-deps.git
result=ok&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since that endpoint is public, the database is obviously gameable. But, you know, don&amp;#8217;t do that please.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;So, that&amp;#8217;s my idea&lt;/em&gt;. It&amp;#8217;s in &lt;code&gt;next&lt;/code&gt;, it&amp;#8217;s working, and the database is growing as of now.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d love to hear your thoughts on this new feature, and your experience using it. The best ways to get in touch are to tweet at &lt;a href='http://twitter.com/babushka_app'&gt;@babushka_app&lt;/a&gt;, or send a message to the &lt;a href='http://groups.google.com/group/babushka_app/'&gt;mailing list&lt;/a&gt;. I&amp;#8217;m keen for your feedback to influence how babushka develops. Sharing is awesome.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>design and DSL changes in babushka-0.6</title>
    <link href="http://benhoskin.gs/2010/08/01/design-and-dsl-changes-in-babushka-v0.6"/>
    <updated>2010-08-01T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2010/08/01/design-and-dsl-changes-in-babushka-v0.6</id>
    <content type="html">&lt;p&gt;I&amp;#8217;ve been chipping away at the latest round of babushka updates over the last six weeks or so. They involved changes to existing babushka components, and several new ones. Once things were specced and working, I let the updates cool in a topic branch while I turned the design over in my hands to see if it felt right. After some tweaks I&amp;#8217;ve decided it does, and so last week I merged the changes to &lt;a href='http://github.com/benhoskings/babushka'&gt;master&lt;/a&gt;. If you update or install today you&amp;#8217;ll have the latest and greatest&amp;#8212;as I write, at v0.6.2.&lt;/p&gt;

&lt;p&gt;If you haven&amp;#8217;t used babushka before, &lt;a href='/2010/08/01/getting-started-with-babushka'&gt;here&amp;#8217;s a quick tutorial and introduction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the impatient, here&amp;#8217;s the short version.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sources have been unified into &lt;code&gt;~/.babushka/sources&lt;/code&gt;, and &lt;code&gt;sources.yml&lt;/code&gt; is gone;&lt;/li&gt;

&lt;li&gt;Namespace deps with &lt;code&gt;sourcename:depname&lt;/code&gt; to jump sources, or to run from a non-default source;&lt;/li&gt;

&lt;li&gt;Instead of &lt;code&gt;app Chromium.app&lt;/code&gt;, use &lt;code&gt;dep Chromium.app&lt;/code&gt;;&lt;/li&gt;

&lt;li&gt;Instead of &lt;code&gt;gem_source &amp;#39;rubygems source present&amp;#39;&lt;/code&gt;, use &lt;code&gt;dep &amp;#39;rubygems source present&amp;#39;, :template =&amp;gt; &amp;#39;gem_source&amp;#39;&lt;/code&gt;;&lt;/li&gt;

&lt;li&gt;The &lt;code&gt;pkg&lt;/code&gt; template was renamed to &lt;code&gt;managed&lt;/code&gt; because it looked like it handled OS X installer packages.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;The latest round of updates involved redesigning the way deps and dep sources work, in order to make collaboration easier, encourage trust-based source sharing, and address what were obvious scaling barriers. A lot of the plumbing has been redesigned and reconnected. A couple of changes to the DSL were required, but the syntax has remained largely the same.&lt;/p&gt;

&lt;p&gt;A lot of the internal changes aren&amp;#8217;t directly visible; together, they mean that dep sources are a lot smoother and more automatic now. The visible changes arose from the fact that the more people start writing deps, the more everyone treads on each others&amp;#8217; toes with naming collisions. As such, dep sources had to be made completely independent of each other. This involved a few separate changes to the way sources work.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Each source maintains its own pool of deps now, so there are no naming conflicts across sources.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Previous versions of babushka loaded deps and templates from all sources into a single &amp;#8216;pool&amp;#8217;. Deps were looked up from the pool by name at runtime when they were run, or were required by another dep. Now each source has a &lt;code&gt;DepPool&lt;/code&gt; of its own, which stores just the deps defined in that source.&lt;/p&gt;

&lt;p&gt;This allows deps in different sources to have the same name without conflicting with each other. The &lt;a href='http://github.com/benhoskings/babushka/tree/master/deps'&gt;core deps&lt;/a&gt; that are bundled with babushka also have their own source, and if you define deps in an interactive session like &lt;code&gt;irb&lt;/code&gt;, they&amp;#8217;re stored in an implicit source.&lt;/p&gt;

&lt;p&gt;In some situations, this means you have to include a dep&amp;#8217;s source in its name, so babushka knows where to look for it.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;To run a dep that isn&amp;#8217;t in a default source, its name has to be namespaced.&lt;/em&gt; There are three default sources whose deps can be referred to without the source name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The core source, usually &lt;code&gt;/usr/local/babushka/deps&lt;/code&gt;, which contains the deps babushka needs to install itself&amp;#8212;things like ruby, git, and the standard package managers;&lt;/li&gt;

&lt;li&gt;The current project&amp;#8217;s deps, found in the current working directory at &lt;code&gt;./babushka-deps&lt;/code&gt;;&lt;/li&gt;

&lt;li&gt;Your personal dep source, at &lt;code&gt;~/.babushka/deps&lt;/code&gt;. In future, babushka will automatically set this directory up as a git repo pointing at &lt;code&gt;http://github.com/you/babushka-deps&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To reference a dep that isn&amp;#8217;t in one of these three core sources, you just prepend the source name to it. So instead of running &lt;code&gt;babushka TextMate.app&lt;/code&gt;, you should instead run &lt;code&gt;babushka benhoskings:TextMate.app&lt;/code&gt; now, and so on.&lt;/p&gt;

&lt;p&gt;Specifying dep names with &lt;code&gt;requires&lt;/code&gt; statements follows the same pattern. To require a dep in one of the three core sources, or one that&amp;#8217;s in the same source as the requiring dep, there&amp;#8217;s no need to specify the source name. To require a non-core dep from a different source, just specify its source name as above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dep &amp;#39;some TextMate plugin&amp;#39; do
  requires &amp;#39;benhoskings:TextMate.app&amp;#39;
  …
end&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;The source system has been totally redesigned, so that it no longer requires a config file, is much more hackable, and can be completely automatic.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Firstly, sources are user-specific now, and stored in &lt;code&gt;~/.babushka/sources&lt;/code&gt; instead of within the babushka installation for all to share (by default, &lt;code&gt;/usr/local/babushka/sources&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Secondly, now that babushka knows where to look for namespaced deps, sources are lazily loaded when a dep they contain is required; the old design eagerly loaded all sources. This saves on startup time once you have more than a few sources present, and means babushka can handle dozens of sources without slowdown.&lt;/p&gt;

&lt;p&gt;Thirdly, since deps can&amp;#8217;t conflict with each other anymore, there&amp;#8217;s no need to set source load order, and so &lt;code&gt;sources.yml&lt;/code&gt; is gone. This makes the source system much simpler: a source&amp;#8217;s name is defined by the name of the directory it&amp;#8217;s in. This allows the source system to be used in a few different ways.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you run a dep like &lt;code&gt;benhoskings:Chromium.app&lt;/code&gt;, the source at &lt;code&gt;~/.babushka/sources/benhoskings&lt;/code&gt; will be loaded, no matter how it got there. So adding sources with custom names, or overriding someone else&amp;#8217;s source with one of your own, is simple&amp;#8212;just name its directory accordingly.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;But, if &lt;code&gt;~/.babushka/sources/benhoskings&lt;/code&gt; doesn&amp;#8217;t exist, it will be cloned from &lt;code&gt;http://github.com/benhoskings/babushka-deps.git&lt;/code&gt;. This is probably what you&amp;#8217;ll want in most cases.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;You can still use &lt;code&gt;babushka sources -a &amp;lt;name&amp;gt; &amp;lt;uri&amp;gt;&lt;/code&gt; to add a source with a custom name; that will clone &lt;code&gt;&amp;lt;uri&amp;gt;&lt;/code&gt; into &lt;code&gt;~/.babushka/sources/&amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;You can inspect all the present sources with &lt;code&gt;babushka sources -l&lt;/code&gt;, which shows some info on each source that babushka knows about, including the path from which babushka will try to update it when it&amp;#8217;s used.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Since &lt;code&gt;sources.yml&lt;/code&gt; is gone, the only stored state is in the names of the source directories. So, it&amp;#8217;s completely safe to manually add, move, rename or delete directories within &lt;code&gt;~/.babushka/sources&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All together, this means that the source system has been unified, so that it no longer distinguishes between sources that were added manually, and sources that were auto-added when a namespaced dep was run. They&amp;#8217;re all one and the same now, in &lt;code&gt;~/.babushka/sources&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;But, there is one caveat:&lt;/strong&gt; babushka assumes that it has control of any git repos within &lt;code&gt;~/.babushka/sources&lt;/code&gt;, so don&amp;#8217;t leave uncommitted changes in any of those repos because babushka won&amp;#8217;t hesitate to blow them away. This might change in future; get in touch on the &lt;a href='http://groups.google.com/group/babushka_app'&gt;mailing list&lt;/a&gt; to share ideas on this.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Everything is just a dep (and always was, but now it&amp;#8217;s obvious).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everything that you can declare with babushka&amp;#8217;s DSL is either a dep or a template. A dep at its lowest level is defined by the three statements &lt;code&gt;requires&lt;/code&gt;, &lt;code&gt;met?&lt;/code&gt; and &lt;code&gt;meet&lt;/code&gt;, and all deps are based on those three, whether they explicitly define them or not.&lt;/p&gt;

&lt;p&gt;You can&amp;#8217;t achieve a truly concise DSL without wrapping up common patterns as they emerge, though, and so you can define deps against templates, like &lt;code&gt;tmbundle&lt;/code&gt;, &lt;code&gt;vim-plugin&lt;/code&gt; or whatever you like. Because some things are worth making universal, a few of these templates are bundled along with babushka itself&amp;#8212;like &lt;code&gt;app&lt;/code&gt; for OS X applications, or &lt;code&gt;gem&lt;/code&gt; for rubygems.&lt;/p&gt;

&lt;p&gt;Confusion arose around these universal templates, though. Their top-level methods like &lt;code&gt;pkg&lt;/code&gt; were defined in babushka core, which meant that they appeared to be special, and that their relation to a standard &lt;code&gt;dep&lt;/code&gt; wasn&amp;#8217;t clear.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s all cleaned up now. Just as sources have been unified, deps are always defined with the &lt;code&gt;dep&lt;/code&gt; top-level method now, whether they use a template or not. Instead of saying &lt;code&gt;gem &amp;#39;hpricot&amp;#39;&lt;/code&gt;, you say either &lt;code&gt;dep &amp;#39;hpricot&amp;#39;, :template =&amp;gt; &amp;#39;gem&amp;#39;&lt;/code&gt;, or &lt;code&gt;dep &amp;#39;hpricot.gem&amp;#39;&lt;/code&gt;. These two styles produce the same dep&amp;#8212;the choice is there to allow you to include the template type in the dep&amp;#8217;s name.&lt;/p&gt;

&lt;p&gt;In a lot of situations, this is just what you want&amp;#8212;for example, &lt;code&gt;TextMate.app&lt;/code&gt;, &lt;code&gt;Cucumber.tmbundle&lt;/code&gt; and &lt;code&gt;sinatra.gem&lt;/code&gt; are all concise names that are defined against templates, and describe exactly what they install. But, there are other situations where it gets messy, and the hash syntax is clearer&amp;#8212;for example, &lt;code&gt;dep &amp;#39;rubygems source present&amp;#39;, :template =&amp;gt; &amp;#39;gem_source&amp;#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All the &lt;a href='http://github.com/benhoskings/babushka/tree/master/deps'&gt;core deps&lt;/a&gt; have been updated, along with the ones in &lt;a href='http://github.com/benhoskings/babushka-deps'&gt;my dep source&lt;/a&gt;. You&amp;#8217;ll need to update your deps before they work with the new version of babushka. The best way to do this is to just try running one of your deps; as babushka tries to load your source it will complain about each piece of the old syntax it doesn&amp;#8217;t understand, and explain how you should update it.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;So, that&amp;#8217;s where things sit at the moment.&lt;/em&gt; I think with this latest round of changes, babushka&amp;#8217;s design is solidifying. But having said that, I&amp;#8217;m still very open to change, and I&amp;#8217;m not afraid of making invasive changes if the case for them is strong enough. I&amp;#8217;m really open to new ideas large and small, so if you have ideas, comments or feedback, I&amp;#8217;d love to hear about them.&lt;/p&gt;

&lt;p&gt;The best place for ideas and discussion is the &lt;a href='http://groups.google.com/group/babushka_app'&gt;mailing list&lt;/a&gt;. You should follow &lt;a href='http://twitter.com/babushka_app'&gt;@babushka_app&lt;/a&gt; for updates and announcements, and &lt;a href='http://twitter.com/?status=%40babushka_app%20'&gt;get in touch&lt;/a&gt; whenever you like. Non-reply tweets are fairly sparse, so following won&amp;#8217;t clog up your timeline.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>getting started with babushka</title>
    <link href="http://benhoskin.gs/2010/08/01/getting-started-with-babushka"/>
    <updated>2010-08-01T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2010/08/01/getting-started-with-babushka</id>
    <content type="html">&lt;p&gt;&lt;em&gt;To install for the first time, or update an existing system&lt;/em&gt;, just run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash -c &amp;quot;`curl babushka.me/up`&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s for a box with &lt;code&gt;curl&lt;/code&gt;, like a Mac. Most Linux boxes have &lt;code&gt;wget&lt;/code&gt; instead, so for those, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash -c &amp;quot;`wget -O - babushka.me/up`&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script at &lt;code&gt;babushka.me/up&lt;/code&gt; downloads a temporary copy of babushka in a tarball, which is used to run &lt;code&gt;babushka babushka&lt;/code&gt;, which in turn installs babushka for real. So if you already have babushka installed, you can just run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`babushka babushka`&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only difference is that the bootstrap command runs from a fresh copy of babushka that it downloads, and &lt;code&gt;babushka babushka&lt;/code&gt; runs from the version that&amp;#8217;s currently on your system.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>Open Letter to Senator the Hon Stephen Conroy, Australian Minister for Broadband, Communications and the Digital Economy</title>
    <link href="http://benhoskin.gs/2009/12/15/open-letter-to-senator-the-hon-stephen-conroy"/>
    <updated>2009-12-15T00:00:00+11:00</updated>
    <id>http://benhoskin.gs/2009/12/15/open-letter-to-senator-the-hon-stephen-conroy</id>
    <content type="html">&lt;p&gt;Dear Minister,&lt;/p&gt;

&lt;p&gt;As an Australian and an internet user, I have grave concerns regarding the &lt;a href='http://www.theage.com.au/technology/technology-news/internet-censorship-plan-gets-the-green-light-20091215-ktzc.html'&gt;mandatory&lt;/a&gt; &lt;a href='http://arstechnica.com/news.ars/post/20081016-net-filters-required-for-all-australians-no-opt-out.html'&gt;internet&lt;/a&gt; &lt;a href='http://www.somebodythinkofthechildren.com/no-opt-out-from-isp-filtering-two-black-lists-and-you-can-only-opt-out-from-one/'&gt;filter&lt;/a&gt; that is currently being deployed in Australia. My concerns are three-fold.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The filter will have no effect on the deliberate transfer of illegal content on the Internet.&lt;/li&gt;

&lt;li&gt;The filter will fail to protect children from illegal and inappropriate content.&lt;/li&gt;

&lt;li&gt;With the filter in place, Australians can no longer rely on having the uncensored, unmonitored access to legal content that democracy demands.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering this, deploying any mandatory, nation-wide content filter is misguided, damaging and foolish in the extreme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The filter will have no effect on the deliberate transfer of illegal content on the Internet.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a web developer with an intimate understanding of how the Internet works, it is clear to me that the filter will fail to stop the transfer of the content it has been created to fight. Unlawful content&amp;#8212;whether it be child pornography, copyrighted material, or anything else&amp;#8212;can easily be moved around by those who are determined to do so.&lt;/p&gt;

&lt;p&gt;Encrypted connections, known as SSL connections, are trivially easy to create between a sender and receiver, so that the content passing between the two nodes is unreadable by a third party. The only way to prevent unfiltered content passing over SSL connections is to block them entirely. Blocking SSL traffic is not an option, because internet banking and all other secure websites rely on SSL and would be rendered non-functional. SSL connections are but one of many tools that criminals can and will employ to circumvent the filter.&lt;/p&gt;

&lt;p&gt;Illegal activity on the Internet shares an intrinsic trait with real-world illegal activity&amp;#8212;those wishing to engage in it will find a way to do so, and it is the job of law enforcement to pursue them directly. Applying a blanket nation-wide restriction is an unacceptable solution. Those among us who choose to access or create illegal content will continue to do so, largely with impunity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The filter will fail to protect children from illegal and inappropriate content.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Content filters, broadly, are based either on blacklists or heuristics. A blacklist is by definition reactive and cannot respond to emerging content immediately. Heuristics are by definition imprecise, blocking only the majority of content they are designed to detect.&lt;/p&gt;

&lt;p&gt;It is certainly possible that the filter could reduce the amount of illegal content that is readily available on the Internet, but reducing it to acceptably low levels is infeasible, and eliminating it is fundamentally impossible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With the filter in place, Australians can no longer rely on having the uncensored, unmonitored access to legal content that democracy demands.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Installing technology that is designed expressly to censor, and then trusting that it will never be used inappropriately, is futile.&lt;/p&gt;

&lt;p&gt;Minister, please understand: I am not suggesting you or the Government harbour an ulterior motive, and I am not suggesting that you intend to curtail intellectual freedom in Australia.&lt;/p&gt;

&lt;p&gt;What I am saying, though, is that you have built a tool that is designed to perform exactly that task.&lt;/p&gt;

&lt;p&gt;What I am saying is that you have brought about a situation where such an eventual curtailment is inevitable. You may intend to block only content that we all agree is defenceless&amp;#8212;child pornography, criminal activity. Who will personally see that the filter is never used politically? Some would say it is reasonable to also block hate speech that incites violence. Radical views that incite fanaticism. Fringe views that incite crackpottery. Controversial views that incite debate?&lt;/p&gt;

&lt;p&gt;With this tool in place, Australians can have no confidence that they have open access to information. I find it incredible that we have reached this point in Australia, a country that has fought wars to protect the freedoms of its own and other people.&lt;/p&gt;

&lt;p&gt;The safety of Australian children is of acute importance. The safety of Australian intellectual freedom, however, is even more important, and censorship of the world&amp;#8217;s primary communication channels is incomparably more damaging to the latter than it is protective of the former.&lt;/p&gt;

&lt;p&gt;A nation-wide internet filter will not stop illegal activity online, will fail to protect children, and will do nothing less than undermine our democracy.&lt;/p&gt;

&lt;p&gt;I trust that you will give my argument your careful consideration and re-evaluate the future of this unfortunate exercise.&lt;/p&gt;

&lt;p&gt;Sincerely yours,&lt;br /&gt;Ben Hoskings&lt;br /&gt;&lt;a href='mailto:ben@hoskings.net'&gt;ben@hoskings.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This letter is licensed under a &lt;a href='http://creativecommons.org/licenses/by-nc-sa/2.5/au/'&gt;Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>minimal menu bar</title>
    <link href="http://benhoskin.gs/2009/12/04/minimal-menu-bar"/>
    <updated>2009-12-04T00:00:00+11:00</updated>
    <id>http://benhoskin.gs/2009/12/04/minimal-menu-bar</id>
    <content type="html">&lt;p&gt;After reading &lt;a href='http://www.rosshill.com.au/article/minimal-mac-menubar/'&gt;Ross Hill&amp;#8217;s post&lt;/a&gt; about his minimal OS X menubar, I decided I&amp;#8217;d try it on mine. I&amp;#8217;m picky about these things, so I think my menu bar looked pretty good to start with, but it was busy.&lt;/p&gt;

&lt;p&gt;&lt;img alt='menubar, before' src='/images/minimal-menubar-before.png' /&gt;&lt;/p&gt;

&lt;p&gt;So I started looking, and thought, well there are a couple of things I can remove, but no, I use almost all of that stuff!&lt;/p&gt;

&lt;p&gt;With Ross&amp;#8217; help though (i.e. him telling me I was wrong), I pared it down to something that I think is looking pretty good.&lt;/p&gt;

&lt;p&gt;&lt;img alt='menubar, after' src='/images/minimal-menubar-after.png' /&gt;&lt;/p&gt;

&lt;p&gt;All the stuff left I actually really do use a lot. In particular, the CPU/memory/network meters are really useful to tell what&amp;#8217;s going on with the system, when I&amp;#8217;m writing code and running specs etc, I use them constantly.&lt;/p&gt;

&lt;p&gt;A nice improvement I&amp;#8217;ve noticed already is that now Tweetie is only visible in my Dock (which is hidden), I&amp;#8217;m not constantly distracted by new tweets. When that little icon turns blue, I can&amp;#8217;t help but click it. Marking the hidden dock icon on mentions and DMs, and then checking it periodically, when I think to, is much less disruptive.&lt;/p&gt;

&lt;p&gt;Cheers Ross :)&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>command duration with fish</title>
    <link href="http://benhoskin.gs/2009/11/26/command-duration-with-fish"/>
    <updated>2009-11-26T00:00:00+11:00</updated>
    <id>http://benhoskin.gs/2009/11/26/command-duration-with-fish</id>
    <content type="html">&lt;p&gt;It&amp;#8217;s often useful to see how long a command took to run. I used to have the date and time in my prompt for that reason&amp;#8211;I could do some mental arithmetic to find out how long a command took.&lt;/p&gt;

&lt;p&gt;But, I&amp;#8217;ve been trying to make my prompt more minimal after being inspired by &lt;a href='http://twitter.com/topfunky'&gt;@topfunky&lt;/a&gt;&amp;#8217;s zen-like prompt, and the date and time clutter it up.&lt;/p&gt;

&lt;p&gt;So, I patched fish to measure how long commands take to run, and write the duration to an environment variable when it&amp;#8217;s useful (i.e. more than a second).&lt;/p&gt;

&lt;p&gt;The patch is in &lt;a href='http://github.com/benhoskings/fish/commit/b7d172719fc0321f384aa1cfb5a68f3295be6a17'&gt;my fish fork&lt;/a&gt;. Here&amp;#8217;s the high-level part of it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    term_donate();

+   gettimeofday(&amp;amp;time_before, NULL);
+
    eval( cmd, 0, TOP );
    job_reap( 1 );

+   gettimeofday(&amp;amp;time_after, NULL);
+   set_env_cmd_duration(&amp;amp;time_after, &amp;amp;time_before);
+
    term_steal();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call to &lt;code&gt;eval()&lt;/code&gt; is where the command is run, so that&amp;#8217;s the call that will block and take time. I&amp;#8217;m using &lt;code&gt;gettimeofday()&lt;/code&gt; to grab a unix timestamp directly before and after the call, and then a new function &lt;code&gt;set_env_cmd_duration()&lt;/code&gt; to write the &lt;code&gt;CMD_DURATION&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;The value in the var is pretty-printed using tiered rounding already, so it&amp;#8217;s ready to echo as a string in your prompt. For example, for commands that take between 10 seconds and 1 minute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swprintf(buf, 16, L&amp;quot;%lu.%01us&amp;quot;, secs, usecs / 100000);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which produces output like this, running a &lt;code&gt;rake spec&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt='fish CMD_DURATION example' src='/images/fish-cmd-duration.png' /&gt;&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>multi-line prompts in fish</title>
    <link href="http://benhoskin.gs/2009/11/25/multi-line-prompts-in-fish"/>
    <updated>2009-11-25T00:00:00+11:00</updated>
    <id>http://benhoskin.gs/2009/11/25/multi-line-prompts-in-fish</id>
    <content type="html">&lt;p&gt;One thing I&amp;#8217;ve missed since switching to fish is a multi-line prompt. If your prompt has newlines in it, they&amp;#8217;re stripped out when the prompt is rendered on-screen.&lt;/p&gt;

&lt;p&gt;First things first: &lt;a href='http://github.com/benhoskings/fish/commit/3e589050b1ab69e07982fb48e8a3bc80ccf1b09b'&gt;here&amp;#8217;s the patch&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  for( i=0; i&amp;lt;al_get_count( &amp;amp;prompt_list); i++ )
  {
    sb_append( &amp;amp;data-&amp;gt;prompt_buff, (wchar_t *)al_get( &amp;amp;prompt_list, i ) );
+     if (i + 1 &amp;lt; al_get_count( &amp;amp;prompt_list))
+     {
+       sb_append( &amp;amp;data-&amp;gt;prompt_buff, L&amp;quot;\n&amp;quot; );
+     }
  }

  al_foreach( &amp;amp;prompt_list, &amp;amp;free );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason the newlines are removed arises from the way fish runs subcommands. Rendering the prompt is a call to the &lt;code&gt;fish_prompt&lt;/code&gt; function, which in turn runs other subcommands like &lt;code&gt;whoami&lt;/code&gt;, &lt;code&gt;pwd&lt;/code&gt; and &lt;code&gt;git ls-files&lt;/code&gt;, depending what you have in your prompt.&lt;/p&gt;

&lt;p&gt;When fish receives &lt;code&gt;fish_prompt&lt;/code&gt;&amp;#8217;s output, it splits on &lt;code&gt;\n&lt;/code&gt; and stores each line in an array, specifically an &lt;code&gt;array_list_t&lt;/code&gt;. When the output is reassembled by &lt;code&gt;exec_prompt()&lt;/code&gt; for output to the terminal, however, it joins the lines in the array (that&amp;#8217;s &lt;code&gt;prompt_list&lt;/code&gt; in the patch above) back together without any join token, so the line separation is gone.&lt;/p&gt;

&lt;p&gt;My patch adds a &lt;code&gt;\n&lt;/code&gt; after every line but the last, so that the newlines in the original un-split output from &lt;code&gt;fish_prompt&lt;/code&gt; are re-inserted for rendering.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>babushka: dmg and macports support</title>
    <link href="http://benhoskin.gs/2009/08/09/babushka-dmg-and-macports-support"/>
    <updated>2009-08-09T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/08/09/babushka-dmg-and-macports-support</id>
    <content type="html">&lt;p&gt;I just added a few new tricks to Babushka. It knows how to open a DMG now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dmg &amp;quot;http://blah.org/appname.dmg&amp;quot; do |path|
  # Use the contents of the DMG here.
  # path is the path at which the DMG was mounted.
  # e.g. /Volumes/appname
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The DMG is downloaded and mounted, and the unmount is handled automatically after the block returns.&lt;/p&gt;

&lt;p&gt;So now, among other things, it can install MacPorts (which is a dependency of git, wget, etc on OS X).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ruby bin/babushka.rb macports
Loaded 0 dependencies from ~/.babushka/deps.
Loaded 59 dependencies from ./deps.
macports {
  build tools {
    xcode tools {
    } √ xcode tools
    build tools / met? not defined.
  } √ build tools
  macports not already met.
  Downloading MacPorts-1.7.1-10.5-Leopard.dmg... done.
  Installing MacPorts-1.7.1... done.
  Running port selfupdate... done.
  macports met.
} √ macports&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>

  <entry>
    <title>adding extended_modules</title>
    <link href="http://benhoskin.gs/2009/07/29/adding-extended-modules"/>
    <updated>2009-07-29T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/29/adding-extended-modules</id>
    <content type="html">&lt;p&gt;It&amp;#8217;s easy to find the modules included in a given class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; String.included_modules
=&amp;gt; [Enumerable, Comparable, Kernel]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Quick update in case you&amp;#8217;re wondering: including a module makes its methods available as instance methods on the receiving class; extending a class with a module makes the methods available as class methods.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s no way to directly query the extended modules of a class, but it&amp;#8217;s easy to get at the information. There&amp;#8217;s no such thing as extending a class really—&amp;#8221;extending a class&amp;#8221; just means including on its metaclass. So:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Module # Thanks for this fix, Adam
  def metaclass
    class &amp;lt;&amp;lt; self; self end
  end
  def extended_modules
    metaclass.included_modules
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; String.extended_modules
=&amp;gt; [Kernel]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bam!&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>we can do better than meta</title>
    <link href="http://benhoskin.gs/2009/07/21/we-can-do-better-than-meta"/>
    <updated>2009-07-21T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/21/we-can-do-better-than-meta</id>
    <content type="html">&lt;p&gt;I fixed a really tricky bug this afternoon. I took a roundabout path towards the bug&amp;#8217;s cause, and used a couple of tools from my ruby toolbox.&lt;/p&gt;

&lt;p&gt;So ruby is dynamically typed, for better or worse. I used to think that was a great idea - who cares what something &lt;em&gt;is&lt;/em&gt;, as long as you know what it &lt;em&gt;does&lt;/em&gt;, right? Ducks and all that?&lt;/p&gt;

&lt;p&gt;Not always the case. I&amp;#8217;m starting to think ruby is too permissive. Not only can you not be sure what type an object is until runtime, you can&amp;#8217;t be sure what the types &lt;em&gt;themselves&lt;/em&gt; consist of - and they can change from moment to moment.&lt;/p&gt;

&lt;p&gt;So here&amp;#8217;s the problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: Uploading after logging in
  Given I am logged in as &amp;quot;member@test.org&amp;quot;
    undefined method `context=&amp;#39; for #&amp;lt;Ambition::Adapters::ActiveRecord::Select:0x3523494&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The login step triggers a GET via webrat, and the call to ambition is far below that. About 25 method calls below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;benhoskings-ambition-0.5.4.3/.../base.rb:122&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But the request works fine when hit from the browser&amp;#8212;so maybe something&amp;#8217;s undefining &lt;code&gt;#context&lt;/code&gt; in the test environment, or similar. In ambition / &lt;code&gt;base.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unless instance.respond_to? :context
  klass.class_eval do
    attr_accessor :context, :negated
    def owner;    @context.owner   end
    def clauses;  @context.clauses end
    def stash;    @context.stash   end
    def negated?; @negated         end
  end
end

instance.context = context # line 122&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Turns out, it&amp;#8217;s the reverse. If we already have &lt;code&gt;#context&lt;/code&gt;, &lt;code&gt;attr_accessor&lt;/code&gt; (which defines it, along with &lt;code&gt;#context=&lt;/code&gt;) is never called. But where the hell is &lt;code&gt;#context&lt;/code&gt; coming from? This test involves rails, hammock, ambition, rspec, cucumber, webrat, machinist, and faker. Oh dear.&lt;/p&gt;

&lt;p&gt;So first, OK. Let&amp;#8217;s just have a look at what that object can do. Just above that &lt;code&gt;respond_to?&lt;/code&gt; check:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# What methods does this object have, that aren&amp;#39;t common to all objects?
p instance.methods.sort - Object.methods&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which gives us&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;both&amp;quot;, &amp;quot;call&amp;quot;, &amp;quot;chained_call&amp;quot;, &amp;quot;dbadapter_name&amp;quot;, &amp;quot;downcase&amp;quot;, &amp;quot;either&amp;quot;, &amp;quot;not_equal&amp;quot;, &amp;quot;not_regexp&amp;quot;, &amp;quot;quote&amp;quot;, &amp;quot;quote_column_name&amp;quot;, &amp;quot;quote_string&amp;quot;, &amp;quot;quote_table_name&amp;quot;, &amp;quot;quoted_date&amp;quot;, &amp;quot;quoted_false&amp;quot;, &amp;quot;quoted_string_prefix&amp;quot;, &amp;quot;quoted_true&amp;quot;, &amp;quot;sanitize&amp;quot;, &amp;quot;statement&amp;quot;, &amp;quot;upcase&amp;quot;]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which doesn&amp;#8217;t include &lt;code&gt;#context&lt;/code&gt;. But &lt;code&gt;respond_to? :context&lt;/code&gt; must have returned true, otherwise all those methods would have been &lt;code&gt;class_eval&lt;/code&gt;ed. We&amp;#8217;ll need a more subtle trick.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;instance.method(:method_missing).owner #=&amp;gt; Kernel&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Damn, they must have known we&amp;#8217;d check that first. If it&amp;#8217;s owned by &lt;code&gt;Kernel&lt;/code&gt;, then no parent or mixin&amp;#8217;s &lt;code&gt;#method_missing&lt;/code&gt; can be responding to the &lt;code&gt;#context&lt;/code&gt; call. How about..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;instance.method(:context).owner #=&amp;gt; Spec::DSL::Main&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha! &lt;code&gt;instance&lt;/code&gt; responds to &lt;code&gt;Spec::DSL::Main#context&lt;/code&gt;. It must have been mixed in by rspec. Let&amp;#8217;s have a look in its source:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def describe(*args, &amp;amp;block)
  [ ... ]
end
alias :context :describe&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep, every class responds to &lt;code&gt;#context&lt;/code&gt; (and &lt;code&gt;#describe&lt;/code&gt;) when rspec is in the mix. But why doesn&amp;#8217;t it appear in the &lt;code&gt;instance.methods&lt;/code&gt; list?&lt;/p&gt;

&lt;p&gt;I had to think about this for a bit. It&amp;#8217;s because &lt;em&gt;every&lt;/em&gt; class responds to &lt;code&gt;#context&lt;/code&gt; when rspec is in the mix, including &lt;code&gt;Object&lt;/code&gt; itself. When we subtracted globally shared methods from the list (&lt;code&gt;- Object.methods&lt;/code&gt;), &lt;code&gt;#context&lt;/code&gt; was one of them. Sure enough,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;instance.methods.include? &amp;#39;context&amp;#39; #=&amp;gt; true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href='http://github.com/benhoskings/ambition/commit/22dba94f1b4ed144b57f3d8dc4a15c91a4c6f65e'&gt;The fix&lt;/a&gt; is easy - the naming collision can be easily avoided in ambition by checking for &lt;code&gt;#context=&lt;/code&gt; instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unless instance.respond_to? :context=
  [ ... ]
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there&amp;#8217;s a good lesson here. Two completely unrelated bits of metaprogramming, each innocuous on their own, colliding and causing mayhem. It might seem like an elegant way to write code, and in some situations it is—but there&amp;#8217;s got to be a better way. I&amp;#8217;m hoping it&amp;#8217;s &lt;a href='http://www.scala-lang.org/'&gt;this&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>speedy rspec with rails</title>
    <link href="http://benhoskin.gs/2009/07/16/speedy-rspec-with-rails"/>
    <updated>2009-07-16T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/16/speedy-rspec-with-rails</id>
    <content type="html">&lt;p&gt;So rails rspec runs are really slow to start up. There are two reasons why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rails is initialised each time, which takes a few seconds&lt;/li&gt;

&lt;li&gt;&lt;code&gt;db:test:prepare&lt;/code&gt; runs before each run, which is another complete rails initialisation in itself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These delays don&amp;#8217;t have anything to do with rspec. It&amp;#8217;s just the nature of the Rails framework—there&amp;#8217;s a lot of ruby to load, to get the framework off the ground. These tweaks don&amp;#8217;t make that process any faster, they avoid it&amp;#8212;firstly by removing a rails initialisation, and then by moving the delay of another away from each rspec run.&lt;/p&gt;

&lt;p&gt;To fix the first, install &lt;a href='http://wiki.github.com/dchelimsky/rspec/spork-autospec-pure-bdd-joy'&gt;spork&lt;/a&gt; and configure it in &lt;code&gt;spec/spec_helper.rb&lt;/code&gt;. Spork keeps an instance of your app running, and listens for connections from a spork-aware &lt;code&gt;rake spec&lt;/code&gt; run. This removes the Rails startup delay more or less completely, since when you run &lt;code&gt;rake spec&lt;/code&gt;, spork has your app ready and waiting to run specs transparently via DRb.&lt;/p&gt;

&lt;p&gt;As for the second, I don&amp;#8217;t see any need to run &lt;code&gt;db:test:prepare&lt;/code&gt; before every run when transactional fixtures are being used. It&amp;#8217;s simple to disable. Change this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Spec::Rake::SpecTask.new(:spec =&amp;gt; spec_prereq) do |t|&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Spec::Rake::SpecTask.new(:spec) do |t|&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in &lt;code&gt;lib/tasks/rspec.rake&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;db:test:prepare&lt;/code&gt; and its subtasks not running, spork there&amp;#8217;s less than a second of delay before specs start running. In my book, that&amp;#8217;s close to fast enough to pleasantly run, and get results in realtime. Coupled with autotest, this should mean much snappier pass/fail feedback too.&lt;/p&gt;

&lt;p&gt;It seems messy to me to have those tasks defined within the app. In fact, most of the rails testing / speccing setup seems to involve just spraying messy generated code around the place. I think this is an example of something done wrong in spite of the fact that the tests may be passing.&lt;/p&gt;

&lt;p&gt;Next, to make ⌘R spec runs in TextMate spork-aware, head to the TextMate preferences and add &lt;code&gt;--drb&lt;/code&gt; to the &lt;code&gt;TM_RSPEC_OPTS&lt;/code&gt; variable (creating it if required). I also had to patch the &lt;code&gt;spec_mate&lt;/code&gt; helper &lt;a href='http://github.com/benhoskings/ruby-rspec.tmbundle/commit/c70b16106cd5ba74e97cc967d0e8f307850cbd28'&gt;like so&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Running through spork causes a bit of a performance hit, too&amp;#8212;it eliminates the startup delay, but the specs run slower, since there&amp;#8217;s a DRb back and forth involved for each one. Spork is for running a few tests at a time, or for running through autotest, while you&amp;#8217;re developing. When you run your full suite, you should stop the spork listener and run them locally at full speed.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>spork + no db prep: four-fold speedup</title>
    <link href="http://benhoskin.gs/2009/07/16/spork-no-db-prep-four-fold-speedup"/>
    <updated>2009-07-16T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/16/spork-no-db-prep-four-fold-speedup</id>
    <content type="html">&lt;p&gt;Here are some numbers for the rails rspeccing changes I &lt;a href='http://ben.hoskings.net/2009/07/16/speedy-rspec-with-rails'&gt;wrote about earlier today&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;before&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; time rake spec
13.27 real         9.93 user         2.18 sys&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;after&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; time rake spec
3.35 real         0.88 user         0.25 sys&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>meta</title>
    <link href="http://benhoskin.gs/2009/07/13/meta"/>
    <updated>2009-07-13T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/13/meta</id>
    <content type="html">&lt;p&gt;I just deployed a long-overdue update. http://ben.hoskings.net is powered by &lt;a href='http://www.enkiblog.com/'&gt;Enki&lt;/a&gt; now, including some cherry-picks from &lt;a href='http://twitter.com/bjeanes'&gt;bjeanes&lt;/a&gt;&amp;#8217; &lt;a href='http://github.com/bjeanes/website'&gt;fork&lt;/a&gt;, and I&amp;#8217;ve moved it to EC2.&lt;/p&gt;

&lt;p&gt;Try the comment form and let me know what you think of the new design :)&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>wildcard nginx / passenger virtualhosts</title>
    <link href="http://benhoskin.gs/2009/07/03/wildcard-nginx-passenger-virtualhosts"/>
    <updated>2009-07-03T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/03/wildcard-nginx-passenger-virtualhosts</id>
    <content type="html">&lt;p&gt;Hosting passenger apps on nginx is easy. If they don&amp;#8217;t need any specific webserver config, though, it&amp;#8217;s even easier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
  listen 80;
  server_name *.com *.com.au *.net *.org;
  root /home/$host/current/public;
  passenger_enabled on;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is particularly useful in a development environment - just set &lt;code&gt;rails_env development&lt;/code&gt; in the &lt;code&gt;server { }&lt;/code&gt; block, and &lt;a href='http://github.com/bjeanes/ghost'&gt;ghost&lt;/a&gt; the domain to localhost.&lt;/p&gt;

&lt;p&gt;You should deploy your app to a directory, and as a user, with the same name as the app&amp;#8217;s root domain. (You should do this anyway, because it&amp;#8217;s neat and consistent.)&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t forget to &lt;code&gt;chown $host /home/$host/current/config/environment.rb&lt;/code&gt;, to run each app as its own user. (You should do this anyway, because it&amp;#8217;s good security practice.)&lt;/p&gt;

&lt;p&gt;You can&amp;#8217;t use &lt;code&gt;server_name *&lt;/code&gt; &amp;#8211; you can only wildcard a domain prefix, not the whole thing.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>restarting and refreshing local passenger apps with fish</title>
    <link href="http://benhoskin.gs/2009/07/02/restarting-and-refreshing-local-passenger-apps-with-fish"/>
    <updated>2009-07-02T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/02/restarting-and-refreshing-local-passenger-apps-with-fish</id>
    <content type="html">&lt;p&gt;Running passenger for development is great, but if you&amp;#8217;re hacking code within a plugin then it&amp;#8217;s cumbersome to constantly &lt;code&gt;touch tmp/restart.txt&lt;/code&gt; and refresh your browser, even if you use &lt;code&gt;tou[UP]&lt;/code&gt; to pick the command from your history.&lt;/p&gt;

&lt;p&gt;Using fish and some applescript, you can do it all from your terminal by hitting ⌥R.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function reload_webkit
  osascript -e &amp;#39;tell application &amp;quot;WebKit&amp;quot; to do JavaScript \
    &amp;quot;window.location.reload()&amp;quot; in front document&amp;#39;
end

function restart_rails_app
  touch tmp/restart.txt
  reload_webkit
end

bind \er &amp;#39;restart_rails_app &amp;gt;/dev/null&amp;#39;&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>

  <entry>
    <title>DRM</title>
    <link href="http://benhoskin.gs/2009/01/08/drm"/>
    <updated>2009-01-08T00:00:00+11:00</updated>
    <id>http://benhoskin.gs/2009/01/08/drm</id>
    <content type="html">&lt;p&gt;I think the biggest news out of the Macworld keynote today was the announcement that the iTunes Store is now largely DRM-free, and completely so by March.&lt;/p&gt;

&lt;p&gt;Steve Jobs wrote &lt;a href='http://www.apple.com/hotnews/thoughtsonmusic/'&gt;thoughts on music&lt;/a&gt; almost two years ago, which left quite an impression on me. Many were sceptical of Apple&amp;#8217;s intent at the time, but Apple repeatedly put their money where their mouth was—first with EMI, then with several smaller labels, and today, with the lot. Top work, I say.&lt;/p&gt;

&lt;p&gt;Conceding tiered pricing to the record companies, which Apple have been holding back on for some time, seems to be a small price to pay—especially since I imagine that the top price bracket will be occupied mostly by new releases and useless pop music.&lt;/p&gt;

&lt;p&gt;Secondly, and this is why I think this is so important—we&amp;#8217;re in a situation now where &lt;strong&gt;every major avenue you can purchase music through is DRM-free&lt;/strong&gt;. That&amp;#8217;s worth thinking about for a moment! CDs, the iTunes Store, and the Amazon MP3 store are all (or by the end of March, will be) totally DRM-free.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a thing: &lt;strong&gt;every major avenue you can purchase video through is DRM-encumbered&lt;/strong&gt;. DVDs, Blu-Ray, Netflix, iTunes Store video.&lt;/p&gt;

&lt;p&gt;So, what the hell? Video hasn&amp;#8217;t caught up to audio yet? People think of video differently and will tolerate DRM? The movie industry thinks of it differently? Video is pirated more aggressively? Or maybe the left hand just doesn&amp;#8217;t know what the right hand is doing?&lt;/p&gt;

&lt;p&gt;I think it&amp;#8217;s a couple of things, but I think this is a crucial difference: music has a certain permanence that movies and TV shows do not.&lt;/p&gt;

&lt;p&gt;When I buy an album, I expect to listen to it lots of times—if I grow to truly love the album, maybe dozens or hundreds of times. But I can&amp;#8217;t imagine watching even life changingly good movies more than a couple of times.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m probably biased because I live and breathe music and don&amp;#8217;t care all that much about movies or TV (&lt;a href='http://www.imdb.com/title/tt1010048/'&gt;with&lt;/a&gt; &lt;a href='http://www.imdb.com/title/tt0367279/'&gt;notable&lt;/a&gt; &lt;a href='http://www.imdb.com/title/tt0200276/'&gt;exception&lt;/a&gt;), but I think that&amp;#8217;s still a fairly major factor in the psychology of both the record companies and the listeners &amp;amp; viewers.&lt;/p&gt;

&lt;p&gt;Whatever the reason, this is huge news. Hat tip to Apple for doing it live, hat tip to the record companies for coming to their senses, and genuflection to the artists whose music I love.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>pull, inspect, update -- and then push.</title>
    <link href="http://benhoskin.gs/2008/12/02/pull-inspect-update-and-then-push"/>
    <updated>2008-12-02T00:00:00+11:00</updated>
    <id>http://benhoskin.gs/2008/12/02/pull-inspect-update-and-then-push</id>
    <content type="html">&lt;p&gt;A common thing I do with git is push my changes to a remote repo, after first updating my project locally with all the changes others have pushed. But I always forget to update first, so the process usually goes&amp;#8211;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;push&lt;/li&gt;

&lt;li&gt;rap my fingers on the table for five seconds while my laptop talks to github on the other side of the world&lt;/li&gt;

&lt;li&gt;&amp;#8220;oh crap I should have pulled first&amp;#8221;&lt;/li&gt;

&lt;li&gt;pull&lt;/li&gt;

&lt;li&gt;update submodules&lt;/li&gt;

&lt;li&gt;push&lt;/li&gt;

&lt;li&gt;&amp;#8220;hmm, what did I just push&amp;#8221;&lt;/li&gt;

&lt;li&gt;get a coffee (this step should have been first).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, I made a little alias to handle it all for me, dropping in my &lt;a href='http://ben.hoskings.net/2008/12/02/a-concise-git-logging-format'&gt;new commits alias&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias gitp=&amp;#39;git pull &amp;amp;&amp;amp;
  git log ORIG_HEAD..HEAD \
    --pretty=format:&amp;quot;%Cblue%h%Creset %Cgreen%an%Creset %s&amp;quot; | cat &amp;amp;&amp;amp;
  echo &amp;amp;&amp;amp;
  git submodule update &amp;amp;&amp;amp;
  git log $(git config branch.master.remote)/master..master \
    --pretty=format:&amp;quot;%Cblue%h%Creset %Cgreen%an%Creset %s&amp;quot; | cat &amp;amp;&amp;amp;
  echo &amp;amp;&amp;amp;
  git push&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This alias pulls, lists the new commits, updates submodules, lists the commits that are about to be pushed, and then pushes them.&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;log&lt;/code&gt; comes after the &lt;code&gt;pull&lt;/code&gt;, it shows a list of the commits that were just pulled down along with a snippet of their commit message. I like this because it lets me see what everyone else has done in the last little while every time I hit the shared repo.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>a concise git logging format</title>
    <link href="http://benhoskin.gs/2008/12/02/a-concise-git-logging-format"/>
    <updated>2008-12-02T00:00:00+11:00</updated>
    <id>http://benhoskin.gs/2008/12/02/a-concise-git-logging-format</id>
    <content type="html">&lt;p&gt;A &lt;code&gt;git merge&lt;/code&gt;, and hence also the merging stage of a &lt;code&gt;git pull&lt;/code&gt;, sets &lt;code&gt;ORIG_HEAD&lt;/code&gt; to the commit that &lt;code&gt;HEAD&lt;/code&gt; pointed to before the merge. So the commits between these two points are the ones the most recent merge introduced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log ORIG_HEAD..HEAD \
  --pretty=format:&amp;quot;%Cblue%h%Creset %Cgreen%an%Creset %s&amp;quot;&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>

</feed>