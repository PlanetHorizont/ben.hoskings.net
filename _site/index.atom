<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://benhoskin.gs/</id>
  <title>benhoskin.gs</title>
  <link href="http://benhoskin.gs" rel="alternate"/>
  <link href="http://benhoskin.gs/index.atom" rel="self"/>
  <updated>2010-07-21T20:25:05+10:00</updated>
  <author>
    <name>Ben Hoskings</name>
    <email>ben@hoskings.net</email>
    <uri>http://benhoskin.gs</uri>
  </author>

  <entry>
    <title>Open Letter to Senator the Hon Stephen Conroy, Australian Minister for Broadband, Communications and the Digital Economy</title>
    <link href="http://benhoskin.gs/2009/12/15/open-letter-to-senator-the-hon-stephen-conroy"/>
    <updated>2009-12-15T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/12/15/open-letter-to-senator-the-hon-stephen-conroy</id>
    <content type="html">&lt;p&gt;Dear Minister,&lt;/p&gt;

&lt;p&gt;As an Australian and an internet user, I have grave concerns regarding the &lt;a href='http://www.theage.com.au/technology/technology-news/internet-censorship-plan-gets-the-green-light-20091215-ktzc.html'&gt;mandatory&lt;/a&gt; &lt;a href='http://arstechnica.com/news.ars/post/20081016-net-filters-required-for-all-australians-no-opt-out.html'&gt;internet&lt;/a&gt; &lt;a href='http://www.somebodythinkofthechildren.com/no-opt-out-from-isp-filtering-two-black-lists-and-you-can-only-opt-out-from-one/'&gt;filter&lt;/a&gt; that is currently being deployed in Australia. My concerns are three-fold.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The filter will have no effect on the deliberate transfer of illegal content on the Internet.&lt;/li&gt;

&lt;li&gt;The filter will fail to protect children from illegal and inappropriate content.&lt;/li&gt;

&lt;li&gt;With the filter in place, Australians can no longer rely on having the uncensored, unmonitored access to legal content that democracy demands.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering this, deploying any mandatory, nation-wide content filter is misguided, damaging and foolish in the extreme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The filter will have no effect on the deliberate transfer of illegal content on the Internet.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a web developer with an intimate understanding of how the Internet works, it is clear to me that the filter will fail to stop the transfer of the content it has been created to fight. Unlawful content&amp;#8212;whether it be child pornography, copyrighted material, or anything else&amp;#8212;can easily be moved around by those who are determined to do so.&lt;/p&gt;

&lt;p&gt;Encrypted connections, known as SSL connections, are trivially easy to create between a sender and receiver, so that the content passing between the two nodes is unreadable by a third party. The only way to prevent unfiltered content passing over SSL connections is to block them entirely. Blocking SSL traffic is not an option, because internet banking and all other secure websites rely on SSL and would be rendered non-functional. SSL connections are but one of many tools that criminals can and will employ to circumvent the filter.&lt;/p&gt;

&lt;p&gt;Illegal activity on the Internet shares an intrinsic trait with real-world illegal activity&amp;#8212;those wishing to engage in it will find a way to do so, and it is the job of law enforcement to pursue them directly. Applying a blanket nation-wide restriction is an unacceptable solution. Those among us who choose to access or create illegal content will continue to do so, largely with impunity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The filter will fail to protect children from illegal and inappropriate content.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Content filters, broadly, are based either on blacklists or heuristics. A blacklist is by definition reactive and cannot respond to emerging content immediately. Heuristics are by definition imprecise, blocking only the majority of content they are designed to detect.&lt;/p&gt;

&lt;p&gt;It is certainly possible that the filter could reduce the amount of illegal content that is readily available on the Internet, but reducing it to acceptably low levels is infeasible, and eliminating it is fundamentally impossible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With the filter in place, Australians can no longer rely on having the uncensored, unmonitored access to legal content that democracy demands.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Installing technology that is designed expressly to censor, and then trusting that it will never be used inappropriately, is futile.&lt;/p&gt;

&lt;p&gt;Minister, please understand: I am not suggesting you or the Government harbour an ulterior motive, and I am not suggesting that you intend to curtail intellectual freedom in Australia.&lt;/p&gt;

&lt;p&gt;What I am saying, though, is that you have built a tool that is designed to perform exactly that task.&lt;/p&gt;

&lt;p&gt;What I am saying is that you have brought about a situation where such an eventual curtailment is inevitable. You may intend to block only content that we all agree is defenceless&amp;#8212;child pornography, criminal activity. Who will personally see that the filter is never used politically? Some would say it is reasonable to also block hate speech that incites violence. Radical views that incite fanaticism. Fringe views that incite crackpottery. Controversial views that incite debate?&lt;/p&gt;

&lt;p&gt;With this tool in place, Australians can have no confidence that they have open access to information. I find it incredible that we have reached this point in Australia, a country that has fought wars to protect the freedoms of its own and other people.&lt;/p&gt;

&lt;p&gt;The safety of Australian children is of acute importance. The safety of Australian intellectual freedom, however, is even more important, and censorship of the world&amp;#8217;s primary communication channels is incomparably more damaging to the latter than it is protective of the former.&lt;/p&gt;

&lt;p&gt;A nation-wide internet filter will not stop illegal activity online, will fail to protect children, and will do nothing less than undermine our democracy.&lt;/p&gt;

&lt;p&gt;I trust that you will give my argument your careful consideration and re-evaluate the future of this unfortunate exercise.&lt;/p&gt;

&lt;p&gt;Sincerely yours,&lt;br /&gt;Ben Hoskings&lt;br /&gt;&lt;a href='mailto:ben@hoskings.net'&gt;ben@hoskings.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This letter is licensed under a &lt;a href='http://creativecommons.org/licenses/by-nc-sa/2.5/au/'&gt;Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>minimal menu bar</title>
    <link href="http://benhoskin.gs/2009/12/04/minimal-menu-bar"/>
    <updated>2009-12-04T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/12/04/minimal-menu-bar</id>
    <content type="html">&lt;p&gt;After reading &lt;a href='http://www.rosshill.com.au/article/minimal-mac-menubar/'&gt;Ross Hill&amp;#8217;s post&lt;/a&gt; about his minimal OS X menubar, I decided I&amp;#8217;d try it on mine. I&amp;#8217;m picky about these things, so I think my menu bar looked pretty good to start with, but it was busy.&lt;/p&gt;

&lt;p&gt;&lt;img src='/images/minimal-menubar-before.png' alt='menubar, before' /&gt;&lt;/p&gt;

&lt;p&gt;So I started looking, and thought, well there are a couple of things I can remove, but no, I use almost all of that stuff!&lt;/p&gt;

&lt;p&gt;With Ross&amp;#8217; help though (i.e. him telling me I was wrong), I pared it down to something that I think is looking pretty good.&lt;/p&gt;

&lt;p&gt;&lt;img src='/images/minimal-menubar-after.png' alt='menubar, after' /&gt;&lt;/p&gt;

&lt;p&gt;All the stuff left I actually really do use a lot. In particular, the CPU/memory/network meters are really useful to tell what&amp;#8217;s going on with the system, when I&amp;#8217;m writing code and running specs etc, I use them constantly.&lt;/p&gt;

&lt;p&gt;A nice improvement I&amp;#8217;ve noticed already is that now Tweetie is only visible in my Dock (which is hidden), I&amp;#8217;m not constantly distracted by new tweets. When that little icon turns blue, I can&amp;#8217;t help but click it. Marking the hidden dock icon on mentions and DMs, and then checking it periodically, when I think to, is much less disruptive.&lt;/p&gt;

&lt;p&gt;Cheers Ross :)&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>command duration with fish</title>
    <link href="http://benhoskin.gs/2009/11/26/command-duration-with-fish"/>
    <updated>2009-11-26T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/11/26/command-duration-with-fish</id>
    <content type="html">&lt;p&gt;It&amp;#8217;s often useful to see how long a command took to run. I used to have the date and time in my prompt for that reason&amp;#8211;I could do some mental arithmetic to find out how long a command took.&lt;/p&gt;

&lt;p&gt;But, I&amp;#8217;ve been trying to make my prompt more minimal after being inspired by &lt;a href='http://twitter.com/topfunky'&gt;@topfunky&lt;/a&gt;&amp;#8217;s zen-like prompt, and the date and time clutter it up.&lt;/p&gt;

&lt;p&gt;So, I patched fish to measure how long commands take to run, and write the duration to an environment variable when it&amp;#8217;s useful (i.e. more than a second).&lt;/p&gt;

&lt;p&gt;The patch is in &lt;a href='http://github.com/benhoskings/fish/commit/b7d172719fc0321f384aa1cfb5a68f3295be6a17'&gt;my fish fork&lt;/a&gt;. Here&amp;#8217;s the high-level part of it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    term_donate();

+   gettimeofday(&amp;amp;time_before, NULL);
+
    eval( cmd, 0, TOP );
    job_reap( 1 );

+   gettimeofday(&amp;amp;time_after, NULL);
+   set_env_cmd_duration(&amp;amp;time_after, &amp;amp;time_before);
+
    term_steal();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call to &lt;code&gt;eval()&lt;/code&gt; is where the command is run, so that&amp;#8217;s the call that will block and take time. I&amp;#8217;m using &lt;code&gt;gettimeofday()&lt;/code&gt; to grab a unix timestamp directly before and after the call, and then a new function &lt;code&gt;set_env_cmd_duration()&lt;/code&gt; to write the &lt;code&gt;CMD_DURATION&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;The value in the var is pretty-printed using tiered rounding already, so it&amp;#8217;s ready to echo as a string in your prompt. For example, for commands that take between 10 seconds and 1 minute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swprintf(buf, 16, L&amp;quot;%lu.%01us&amp;quot;, secs, usecs / 100000);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which produces output like this, running a &lt;code&gt;rake spec&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src='/images/fish-cmd-duration.png' alt='fish CMD_DURATION example' /&gt;&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>multi-line prompts in fish</title>
    <link href="http://benhoskin.gs/2009/11/25/multi-line-prompts-in-fish"/>
    <updated>2009-11-25T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/11/25/multi-line-prompts-in-fish</id>
    <content type="html">&lt;p&gt;One thing I&amp;#8217;ve missed since switching to fish is a multi-line prompt. If your prompt has newlines in it, they&amp;#8217;re stripped out when the prompt is rendered on-screen.&lt;/p&gt;

&lt;p&gt;First things first: &lt;a href='http://github.com/benhoskings/fish/commit/3e589050b1ab69e07982fb48e8a3bc80ccf1b09b'&gt;here&amp;#8217;s the patch&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  for( i=0; i&amp;lt;al_get_count( &amp;amp;prompt_list); i++ )
  {
    sb_append( &amp;amp;data-&amp;gt;prompt_buff, (wchar_t *)al_get( &amp;amp;prompt_list, i ) );
+     if (i + 1 &amp;lt; al_get_count( &amp;amp;prompt_list))
+     {
+       sb_append( &amp;amp;data-&amp;gt;prompt_buff, L&amp;quot;\n&amp;quot; );
+     }
  }

  al_foreach( &amp;amp;prompt_list, &amp;amp;free );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason the newlines are removed arises from the way fish runs subcommands. Rendering the prompt is a call to the &lt;code&gt;fish_prompt&lt;/code&gt; function, which in turn runs other subcommands like &lt;code&gt;whoami&lt;/code&gt;, &lt;code&gt;pwd&lt;/code&gt; and &lt;code&gt;git ls-files&lt;/code&gt;, depending what you have in your prompt.&lt;/p&gt;

&lt;p&gt;When fish receives &lt;code&gt;fish_prompt&lt;/code&gt;&amp;#8217;s output, it splits on &lt;code&gt;\n&lt;/code&gt; and stores each line in an array, specifically an &lt;code&gt;array_list_t&lt;/code&gt;. When the output is reassembled by &lt;code&gt;exec_prompt()&lt;/code&gt; for output to the terminal, however, it joins the lines in the array (that&amp;#8217;s &lt;code&gt;prompt_list&lt;/code&gt; in the patch above) back together without any join token, so the line separation is gone.&lt;/p&gt;

&lt;p&gt;My patch adds a &lt;code&gt;\n&lt;/code&gt; after every line but the last, so that the newlines in the original un-split output from &lt;code&gt;fish_prompt&lt;/code&gt; are re-inserted for rendering.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>babushka: dmg and macports support</title>
    <link href="http://benhoskin.gs/2009/08/09/babushka-dmg-and-macports-support"/>
    <updated>2009-08-09T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/08/09/babushka-dmg-and-macports-support</id>
    <content type="html">&lt;p&gt;I just added a few new tricks to Babushka. It knows how to open a DMG now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dmg &amp;quot;http://blah.org/appname.dmg&amp;quot; do |path|
  # Use the contents of the DMG here.
  # path is the path at which the DMG was mounted.
  # e.g. /Volumes/appname
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The DMG is downloaded and mounted, and the unmount is handled automatically after the block returns.&lt;/p&gt;

&lt;p&gt;So now, among other things, it can install MacPorts (which is a dependency of git, wget, etc on OS X).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ruby bin/babushka.rb macports
Loaded 0 dependencies from ~/.babushka/deps.
Loaded 59 dependencies from ./deps.
macports {
  build tools {
    xcode tools {
    } √ xcode tools
    build tools / met? not defined.
  } √ build tools
  macports not already met.
  Downloading MacPorts-1.7.1-10.5-Leopard.dmg... done.
  Installing MacPorts-1.7.1... done.
  Running port selfupdate... done.
  macports met.
} √ macports&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>

  <entry>
    <title>adding extended_modules</title>
    <link href="http://benhoskin.gs/2009/07/29/adding-extended-modules"/>
    <updated>2009-07-29T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/29/adding-extended-modules</id>
    <content type="html">&lt;p&gt;It&amp;#8217;s easy to find the modules included in a given class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; String.included_modules
=&amp;gt; [Enumerable, Comparable, Kernel]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Quick update in case you&amp;#8217;re wondering: including a module makes its methods available as instance methods on the receiving class; extending a class with a module makes the methods available as class methods.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s no way to directly query the extended modules of a class, but it&amp;#8217;s easy to get at the information. There&amp;#8217;s no such thing as extending a class really—&amp;#8221;extending a class&amp;#8221; just means including on its metaclass. So:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Module # Thanks for this fix, Adam
  def metaclass
    class &amp;lt;&amp;lt; self; self end
  end
  def extended_modules
    metaclass.included_modules
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; String.extended_modules
=&amp;gt; [Kernel]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bam!&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>we can do better than meta</title>
    <link href="http://benhoskin.gs/2009/07/21/we-can-do-better-than-meta"/>
    <updated>2009-07-21T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/21/we-can-do-better-than-meta</id>
    <content type="html">&lt;p&gt;I fixed a really tricky bug this afternoon. I took a roundabout path towards the bug&amp;#8217;s cause, and used a couple of tools from my ruby toolbox.&lt;/p&gt;

&lt;p&gt;So ruby is dynamically typed, for better or worse. I used to think that was a great idea - who cares what something &lt;em&gt;is&lt;/em&gt;, as long as you know what it &lt;em&gt;does&lt;/em&gt;, right? Ducks and all that?&lt;/p&gt;

&lt;p&gt;Not always the case. I&amp;#8217;m starting to think ruby is too permissive. Not only can you not be sure what type an object is until runtime, you can&amp;#8217;t be sure what the types &lt;em&gt;themselves&lt;/em&gt; consist of - and they can change from moment to moment.&lt;/p&gt;

&lt;p&gt;So here&amp;#8217;s the problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: Uploading after logging in
  Given I am logged in as &amp;quot;member@test.org&amp;quot;
    undefined method `context=&amp;#39; for #&amp;lt;Ambition::Adapters::ActiveRecord::Select:0x3523494&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The login step triggers a GET via webrat, and the call to ambition is far below that. About 25 method calls below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;benhoskings-ambition-0.5.4.3/.../base.rb:122&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But the request works fine when hit from the browser&amp;#8212;so maybe something&amp;#8217;s undefining &lt;code&gt;#context&lt;/code&gt; in the test environment, or similar. In ambition / &lt;code&gt;base.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unless instance.respond_to? :context
  klass.class_eval do
    attr_accessor :context, :negated
    def owner;    @context.owner   end
    def clauses;  @context.clauses end
    def stash;    @context.stash   end
    def negated?; @negated         end
  end
end

instance.context = context # line 122&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Turns out, it&amp;#8217;s the reverse. If we already have &lt;code&gt;#context&lt;/code&gt;, &lt;code&gt;attr_accessor&lt;/code&gt; (which defines it, along with &lt;code&gt;#context=&lt;/code&gt;) is never called. But where the hell is &lt;code&gt;#context&lt;/code&gt; coming from? This test involves rails, hammock, ambition, rspec, cucumber, webrat, machinist, and faker. Oh dear.&lt;/p&gt;

&lt;p&gt;So first, OK. Let&amp;#8217;s just have a look at what that object can do. Just above that &lt;code&gt;respond_to?&lt;/code&gt; check:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# What methods does this object have, that aren&amp;#39;t common to all objects?
p instance.methods.sort - Object.methods&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which gives us&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;both&amp;quot;, &amp;quot;call&amp;quot;, &amp;quot;chained_call&amp;quot;, &amp;quot;dbadapter_name&amp;quot;, &amp;quot;downcase&amp;quot;, &amp;quot;either&amp;quot;, &amp;quot;not_equal&amp;quot;, &amp;quot;not_regexp&amp;quot;, &amp;quot;quote&amp;quot;, &amp;quot;quote_column_name&amp;quot;, &amp;quot;quote_string&amp;quot;, &amp;quot;quote_table_name&amp;quot;, &amp;quot;quoted_date&amp;quot;, &amp;quot;quoted_false&amp;quot;, &amp;quot;quoted_string_prefix&amp;quot;, &amp;quot;quoted_true&amp;quot;, &amp;quot;sanitize&amp;quot;, &amp;quot;statement&amp;quot;, &amp;quot;upcase&amp;quot;]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which doesn&amp;#8217;t include &lt;code&gt;#context&lt;/code&gt;. But &lt;code&gt;respond_to? :context&lt;/code&gt; must have returned true, otherwise all those methods would have been &lt;code&gt;class_eval&lt;/code&gt;ed. We&amp;#8217;ll need a more subtle trick.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;instance.method(:method_missing).owner #=&amp;gt; Kernel&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Damn, they must have known we&amp;#8217;d check that first. If it&amp;#8217;s owned by &lt;code&gt;Kernel&lt;/code&gt;, then no parent or mixin&amp;#8217;s &lt;code&gt;#method_missing&lt;/code&gt; can be responding to the &lt;code&gt;#context&lt;/code&gt; call. How about..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;instance.method(:context).owner #=&amp;gt; Spec::DSL::Main&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha! &lt;code&gt;instance&lt;/code&gt; responds to &lt;code&gt;Spec::DSL::Main#context&lt;/code&gt;. It must have been mixed in by rspec. Let&amp;#8217;s have a look in its source:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def describe(*args, &amp;amp;block)
  [ ... ]
end
alias :context :describe&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep, every class responds to &lt;code&gt;#context&lt;/code&gt; (and &lt;code&gt;#describe&lt;/code&gt;) when rspec is in the mix. But why doesn&amp;#8217;t it appear in the &lt;code&gt;instance.methods&lt;/code&gt; list?&lt;/p&gt;

&lt;p&gt;I had to think about this for a bit. It&amp;#8217;s because &lt;em&gt;every&lt;/em&gt; class responds to &lt;code&gt;#context&lt;/code&gt; when rspec is in the mix, including &lt;code&gt;Object&lt;/code&gt; itself. When we subtracted globally shared methods from the list (&lt;code&gt;- Object.methods&lt;/code&gt;), &lt;code&gt;#context&lt;/code&gt; was one of them. Sure enough,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;instance.methods.include? &amp;#39;context&amp;#39; #=&amp;gt; true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href='http://github.com/benhoskings/ambition/commit/22dba94f1b4ed144b57f3d8dc4a15c91a4c6f65e'&gt;The fix&lt;/a&gt; is easy - the naming collision can be easily avoided in ambition by checking for &lt;code&gt;#context=&lt;/code&gt; instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unless instance.respond_to? :context=
  [ ... ]
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there&amp;#8217;s a good lesson here. Two completely unrelated bits of metaprogramming, each innocuous on their own, colliding and causing mayhem. It might seem like an elegant way to write code, and in some situations it is—but there&amp;#8217;s got to be a better way. I&amp;#8217;m hoping it&amp;#8217;s &lt;a href='http://www.scala-lang.org/'&gt;this&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>speedy rspec with rails</title>
    <link href="http://benhoskin.gs/2009/07/16/speedy-rspec-with-rails"/>
    <updated>2009-07-16T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/16/speedy-rspec-with-rails</id>
    <content type="html">&lt;p&gt;So rails rspec runs are really slow to start up. There are two reasons why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rails is initialised each time, which takes a few seconds&lt;/li&gt;

&lt;li&gt;&lt;code&gt;db:test:prepare&lt;/code&gt; runs before each run, which is another complete rails initialisation in itself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These delays don&amp;#8217;t have anything to do with rspec. It&amp;#8217;s just the nature of the Rails framework—there&amp;#8217;s a lot of ruby to load, to get the framework off the ground. These tweaks don&amp;#8217;t make that process any faster, they avoid it&amp;#8212;firstly by removing a rails initialisation, and then by moving the delay of another away from each rspec run.&lt;/p&gt;

&lt;p&gt;To fix the first, install &lt;a href='http://wiki.github.com/dchelimsky/rspec/spork-autospec-pure-bdd-joy'&gt;spork&lt;/a&gt; and configure it in &lt;code&gt;spec/spec_helper.rb&lt;/code&gt;. Spork keeps an instance of your app running, and listens for connections from a spork-aware &lt;code&gt;rake spec&lt;/code&gt; run. This removes the Rails startup delay more or less completely, since when you run &lt;code&gt;rake spec&lt;/code&gt;, spork has your app ready and waiting to run specs transparently via DRb.&lt;/p&gt;

&lt;p&gt;As for the second, I don&amp;#8217;t see any need to run &lt;code&gt;db:test:prepare&lt;/code&gt; before every run when transactional fixtures are being used. It&amp;#8217;s simple to disable. Change this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Spec::Rake::SpecTask.new(:spec =&amp;gt; spec_prereq) do |t|&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Spec::Rake::SpecTask.new(:spec) do |t|&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in &lt;code&gt;lib/tasks/rspec.rake&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;db:test:prepare&lt;/code&gt; and its subtasks not running, spork there&amp;#8217;s less than a second of delay before specs start running. In my book, that&amp;#8217;s close to fast enough to pleasantly run, and get results in realtime. Coupled with autotest, this should mean much snappier pass/fail feedback too.&lt;/p&gt;

&lt;p&gt;It seems messy to me to have those tasks defined within the app. In fact, most of the rails testing / speccing setup seems to involve just spraying messy generated code around the place. I think this is an example of something done wrong in spite of the fact that the tests may be passing.&lt;/p&gt;

&lt;p&gt;Next, to make ⌘R spec runs in TextMate spork-aware, head to the TextMate preferences and add &lt;code&gt;--drb&lt;/code&gt; to the &lt;code&gt;TM_RSPEC_OPTS&lt;/code&gt; variable (creating it if required). I also had to patch the &lt;code&gt;spec_mate&lt;/code&gt; helper &lt;a href='http://github.com/benhoskings/ruby-rspec.tmbundle/commit/c70b16106cd5ba74e97cc967d0e8f307850cbd28'&gt;like so&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Running through spork causes a bit of a performance hit, too&amp;#8212;it eliminates the startup delay, but the specs run slower, since there&amp;#8217;s a DRb back and forth involved for each one. Spork is for running a few tests at a time, or for running through autotest, while you&amp;#8217;re developing. When you run your full suite, you should stop the spork listener and run them locally at full speed.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>spork + no db prep: four-fold speedup</title>
    <link href="http://benhoskin.gs/2009/07/16/spork-no-db-prep-four-fold-speedup"/>
    <updated>2009-07-16T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/16/spork-no-db-prep-four-fold-speedup</id>
    <content type="html">&lt;p&gt;Here are some numbers for the rails rspeccing changes I &lt;a href='http://ben.hoskings.net/2009/07/16/speedy-rspec-with-rails'&gt;wrote about earlier today&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;before&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; time rake spec
13.27 real         9.93 user         2.18 sys&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;after&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; time rake spec
3.35 real         0.88 user         0.25 sys&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>meta</title>
    <link href="http://benhoskin.gs/2009/07/13/meta"/>
    <updated>2009-07-13T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/13/meta</id>
    <content type="html">&lt;p&gt;I just deployed a long-overdue update. http://ben.hoskings.net is powered by &lt;a href='http://www.enkiblog.com/'&gt;Enki&lt;/a&gt; now, including some cherry-picks from &lt;a href='http://twitter.com/bjeanes'&gt;bjeanes&lt;/a&gt;&amp;#8217; &lt;a href='http://github.com/bjeanes/website'&gt;fork&lt;/a&gt;, and I&amp;#8217;ve moved it to EC2.&lt;/p&gt;

&lt;p&gt;Try the comment form and let me know what you think of the new design :)&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>wildcard nginx / passenger virtualhosts</title>
    <link href="http://benhoskin.gs/2009/07/03/wildcard-nginx-passenger-virtualhosts"/>
    <updated>2009-07-03T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/03/wildcard-nginx-passenger-virtualhosts</id>
    <content type="html">&lt;p&gt;Hosting passenger apps on nginx is easy. If they don&amp;#8217;t need any specific webserver config, though, it&amp;#8217;s even easier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
  listen 80;
  server_name *.com *.com.au *.net *.org;
  root /home/$host/current/public;
  passenger_enabled on;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is particularly useful in a development environment - just set &lt;code&gt;rails_env development&lt;/code&gt; in the &lt;code&gt;server { }&lt;/code&gt; block, and &lt;a href='http://github.com/bjeanes/ghost'&gt;ghost&lt;/a&gt; the domain to localhost.&lt;/p&gt;

&lt;p&gt;You should deploy your app to a directory, and as a user, with the same name as the app&amp;#8217;s root domain. (You should do this anyway, because it&amp;#8217;s neat and consistent.)&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t forget to &lt;code&gt;chown $host /home/$host/current/config/environment.rb&lt;/code&gt;, to run each app as its own user. (You should do this anyway, because it&amp;#8217;s good security practice.)&lt;/p&gt;

&lt;p&gt;You can&amp;#8217;t use &lt;code&gt;server_name *&lt;/code&gt; &amp;#8211; you can only wildcard a domain prefix, not the whole thing.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>restarting and refreshing local passenger apps with fish</title>
    <link href="http://benhoskin.gs/2009/07/02/restarting-and-refreshing-local-passenger-apps-with-fish"/>
    <updated>2009-07-02T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/07/02/restarting-and-refreshing-local-passenger-apps-with-fish</id>
    <content type="html">&lt;p&gt;Running passenger for development is great, but if you&amp;#8217;re hacking code within a plugin then it&amp;#8217;s cumbersome to constantly &lt;code&gt;touch tmp/restart.txt&lt;/code&gt; and refresh your browser, even if you use &lt;code&gt;tou[UP]&lt;/code&gt; to pick the command from your history.&lt;/p&gt;

&lt;p&gt;Using fish and some applescript, you can do it all from your terminal by hitting ⌥R.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function reload_webkit
  osascript -e &amp;#39;tell application &amp;quot;WebKit&amp;quot; to do JavaScript \
    &amp;quot;window.location.reload()&amp;quot; in front document&amp;#39;
end

function restart_rails_app
  touch tmp/restart.txt
  reload_webkit
end

bind \er &amp;#39;restart_rails_app &amp;gt;/dev/null&amp;#39;&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>

  <entry>
    <title>DRM</title>
    <link href="http://benhoskin.gs/2009/01/08/drm"/>
    <updated>2009-01-08T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2009/01/08/drm</id>
    <content type="html">&lt;p&gt;I think the biggest news out of the Macworld keynote today was the announcement that the iTunes Store is now largely DRM-free, and completely so by March.&lt;/p&gt;

&lt;p&gt;Steve Jobs wrote &lt;a href='http://www.apple.com/hotnews/thoughtsonmusic/'&gt;thoughts on music&lt;/a&gt; almost two years ago, which left quite an impression on me. Many were sceptical of Apple&amp;#8217;s intent at the time, but Apple repeatedly put their money where their mouth was—first with EMI, then with several smaller labels, and today, with the lot. Top work, I say.&lt;/p&gt;

&lt;p&gt;Conceding tiered pricing to the record companies, which Apple have been holding back on for some time, seems to be a small price to pay—especially since I imagine that the top price bracket will be occupied mostly by new releases and useless pop music.&lt;/p&gt;

&lt;p&gt;Secondly, and this is why I think this is so important—we&amp;#8217;re in a situation now where &lt;strong&gt;every major avenue you can purchase music through is DRM-free&lt;/strong&gt;. That&amp;#8217;s worth thinking about for a moment! CDs, the iTunes Store, and the Amazon MP3 store are all (or by the end of March, will be) totally DRM-free.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a thing: &lt;strong&gt;every major avenue you can purchase video through is DRM-encumbered&lt;/strong&gt;. DVDs, Blu-Ray, Netflix, iTunes Store video.&lt;/p&gt;

&lt;p&gt;So, what the hell? Video hasn&amp;#8217;t caught up to audio yet? People think of video differently and will tolerate DRM? The movie industry thinks of it differently? Video is pirated more aggressively? Or maybe the left hand just doesn&amp;#8217;t know what the right hand is doing?&lt;/p&gt;

&lt;p&gt;I think it&amp;#8217;s a couple of things, but I think this is a crucial difference: music has a certain permanence that movies and TV shows do not.&lt;/p&gt;

&lt;p&gt;When I buy an album, I expect to listen to it lots of times—if I grow to truly love the album, maybe dozens or hundreds of times. But I can&amp;#8217;t imagine watching even life changingly good movies more than a couple of times.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m probably biased because I live and breathe music and don&amp;#8217;t care all that much about movies or TV (&lt;a href='http://www.imdb.com/title/tt1010048/'&gt;with&lt;/a&gt; &lt;a href='http://www.imdb.com/title/tt0367279/'&gt;notable&lt;/a&gt; &lt;a href='http://www.imdb.com/title/tt0200276/'&gt;exception&lt;/a&gt;), but I think that&amp;#8217;s still a fairly major factor in the psychology of both the record companies and the listeners &amp;amp; viewers.&lt;/p&gt;

&lt;p&gt;Whatever the reason, this is huge news. Hat tip to Apple for doing it live, hat tip to the record companies for coming to their senses, and genuflection to the artists whose music I love.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>pull, inspect, update -- and then push.</title>
    <link href="http://benhoskin.gs/2008/12/02/pull-inspect-update-and-then-push"/>
    <updated>2008-12-02T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2008/12/02/pull-inspect-update-and-then-push</id>
    <content type="html">&lt;p&gt;A common thing I do with git is push my changes to a remote repo, after first updating my project locally with all the changes others have pushed. But I always forget to update first, so the process usually goes&amp;#8211;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;push&lt;/li&gt;

&lt;li&gt;rap my fingers on the table for five seconds while my laptop talks to github on the other side of the world&lt;/li&gt;

&lt;li&gt;&amp;#8220;oh crap I should have pulled first&amp;#8221;&lt;/li&gt;

&lt;li&gt;pull&lt;/li&gt;

&lt;li&gt;update submodules&lt;/li&gt;

&lt;li&gt;push&lt;/li&gt;

&lt;li&gt;&amp;#8220;hmm, what did I just push&amp;#8221;&lt;/li&gt;

&lt;li&gt;get a coffee (this step should have been first).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, I made a little alias to handle it all for me, dropping in my &lt;a href='http://ben.hoskings.net/2008/12/02/a-concise-git-logging-format'&gt;new commits alias&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias gitp=&amp;#39;git pull &amp;amp;&amp;amp;
  git log ORIG_HEAD..HEAD \
    --pretty=format:&amp;quot;%Cblue%h%Creset %Cgreen%an%Creset %s&amp;quot; | cat &amp;amp;&amp;amp;
  echo &amp;amp;&amp;amp;
  git submodule update &amp;amp;&amp;amp;
  git log $(git config branch.master.remote)/master..master \
    --pretty=format:&amp;quot;%Cblue%h%Creset %Cgreen%an%Creset %s&amp;quot; | cat &amp;amp;&amp;amp;
  echo &amp;amp;&amp;amp;
  git push&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This alias pulls, lists the new commits, updates submodules, lists the commits that are about to be pushed, and then pushes them.&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;log&lt;/code&gt; comes after the &lt;code&gt;pull&lt;/code&gt;, it shows a list of the commits that were just pulled down along with a snippet of their commit message. I like this because it lets me see what everyone else has done in the last little while every time I hit the shared repo.&lt;/p&gt;</content>
  </entry>

  <entry>
    <title>a concise git logging format</title>
    <link href="http://benhoskin.gs/2008/12/02/a-concise-git-logging-format"/>
    <updated>2008-12-02T00:00:00+10:00</updated>
    <id>http://benhoskin.gs/2008/12/02/a-concise-git-logging-format</id>
    <content type="html">&lt;p&gt;A &lt;code&gt;git merge&lt;/code&gt;, and hence also the merging stage of a &lt;code&gt;git pull&lt;/code&gt;, sets &lt;code&gt;ORIG_HEAD&lt;/code&gt; to the commit that &lt;code&gt;HEAD&lt;/code&gt; pointed to before the merge. So the commits between these two points are the ones the most recent merge introduced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log ORIG_HEAD..HEAD \
  --pretty=format:&amp;quot;%Cblue%h%Creset %Cgreen%an%Creset %s&amp;quot;&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>

</feed>